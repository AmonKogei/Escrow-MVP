// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for clarity and type safety
enum UserRole {
  ADMIN
  SELLER
  BUYER
}

enum EscrowStatus {
  HOLD // Funds locked by Buyer
  DISPUTED // Dispute raised, funds locked
  RELEASED // Funds released to Seller
  REFUNDED // Funds returned to Buyer (e.g., dispute resolved in Buyer's favor)
  CANCELLED // Escrow cancelled by mutual agreement or before lock
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  ESCROW_LOCK // Movement internal to a user's balance
  ESCROW_RELEASE // Movement from Escrow to a user's balance
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

// Core User Model
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(BUYER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Platform Balance (Stored as Decimal for precision)
  balance Decimal @default(0.0) @db.Decimal(10, 2) // Max 99,999,999.99 KES

  // Relationships
  initiatedEscrows Escrow[]      @relation("BuyerEscrows")
  receivedEscrows  Escrow[]      @relation("SellerEscrows")
  transactions     Transaction[]
  auditLogs        AuditLog[]
}

// The core ACID model: funds locked for a trade
model Escrow {
  id          String       @id @default(uuid())
  amount      Decimal      @db.Decimal(10, 2)
  status      EscrowStatus @default(HOLD)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  buyerId  String
  sellerId String

  buyer  User @relation("BuyerEscrows", fields: [buyerId], references: [id])
  seller User @relation("SellerEscrows", fields: [sellerId], references: [id])

  // Dispute Handling
  disputeRaised     Boolean   @default(false)
  disputeReason     String?
  disputeResolvedAt DateTime?
}

// All money movements for audit
model Transaction {
  id      String            @id @default(uuid())
  userId  String
  type    TransactionType
  status  TransactionStatus
  amount  Decimal           @db.Decimal(10, 2)
  details Json // e.g., M-Pesa details, bank info, withdrawal ID

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  // Optional: Link to an Escrow if this transaction is related to it
  escrowId String?

  // Unique reference for deposits/withdrawals
  externalRef String? @unique
}

// Audit Log for all critical state changes (Safety Requirement)
model AuditLog {
  id       String  @id @default(uuid())
  userId   String
  action   String
  entityId String? // ID of the User/Escrow/Transaction affected
  oldState Json?
  newState Json?

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([entityId])
}
