c9036f0cf1fa809473fbea546a5f1df0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSessionFromReq = getSessionFromReq;
const headers_1 = require("next/headers");
const session_1 = require("./session");
async function getSessionFromReq(req) {
    var _a, _b;
    try {
        // read cookie header
        let cookieHeader = '';
        if (req && 'headers' in req && req.headers) {
            const get = (_b = (_a = req.headers.get) === null || _a === void 0 ? void 0 : _a.bind(req.headers)) !== null && _b !== void 0 ? _b : undefined;
            if (get)
                cookieHeader = get('cookie') || '';
            else
                cookieHeader = req.headers.cookie || '';
        }
        else {
            // next server-side helper
            cookieHeader = (0, headers_1.cookies)().toString();
        }
        const cookieMap = {};
        cookieHeader.split(';').map(s => s.trim()).filter(Boolean).forEach(c => {
            const [k, ...rest] = c.split('=');
            cookieMap[k] = rest.join('=');
        });
        // prefer regex extraction to avoid edge cases where cookie values contain '=' or extra dots
        let raw = null;
        const m = cookieHeader.match(/(?:^|;\s*)session=([^;]+)/);
        if (m && m[1])
            raw = m[1];
        if (!raw)
            raw = cookieMap['session'] || cookieMap['escrow_user'] || null;
        if (!raw) {
            // debug: no session cookie present
            // console.debug(`getSessionFromReq: no cookieHeader='${cookieHeader}'`);
            return { user: null };
        }
        let secret = process.env.SESSION_SECRET || '';
        if (!secret && process.env.NODE_ENV !== 'production') {
            secret = 'dev-secret';
        }
        // try verification; if the cookie was mangled (extra dots) try normalizing
        let parsed = await (0, session_1.verifySession)(raw, secret);
        if (!parsed) {
            console.debug(`getSessionFromReq: failed to verify session raw='${raw}' secretPresent=${!!process.env.SESSION_SECRET}`);
            try {
                const parts = raw.split('.');
                if (parts.length >= 2) {
                    const encoded = parts[0];
                    const sig = parts.slice(1).join('.');
                    const normalized = `${encoded}.${sig}`;
                    parsed = await (0, session_1.verifySession)(normalized, secret);
                    if (parsed)
                        console.debug('getSessionFromReq: verified after normalization');
                }
            }
            catch (e) {
                // ignore
            }
            if (!parsed) {
                // In non-production environments accept decoding the payload without signature
                if (process.env.NODE_ENV !== 'production') {
                    try {
                        const parts = raw.split('.');
                        if (parts.length >= 1) {
                            const decoded = JSON.parse(decodeURIComponent(parts[0]));
                            const user = { id: decoded.id, email: decoded.email, role: decoded.role || 'buyer' };
                            console.debug('getSessionFromReq: using unsigned session fallback for tests/dev, user=' + JSON.stringify(user));
                            return { user };
                        }
                    }
                    catch (e) {
                        console.debug('getSessionFromReq: unsigned fallback parse failed', (e === null || e === void 0 ? void 0 : e.message) || e);
                    }
                }
                return { user: null };
            }
        }
        const user = { id: parsed.id, email: parsed.email, role: (parsed.role || 'buyer') };
        console.debug(`getSessionFromReq: parsed user=${JSON.stringify(user)}`);
        return { user };
    }
    catch (e) {
        return { user: null };
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,