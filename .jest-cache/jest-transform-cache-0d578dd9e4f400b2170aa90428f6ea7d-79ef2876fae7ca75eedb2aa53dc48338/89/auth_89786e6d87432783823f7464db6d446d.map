{"file":"C:\\Users\\USER\\Downloads\\Escrow MVP\\src\\lib\\auth.ts","mappings":";;AAIA,8CA0EC;AA9ED,0CAAuC;AACvC,uCAA0C;AAGnC,KAAK,UAAU,iBAAiB,CAAC,GAA+D;;IACrG,IAAI,CAAC;QACH,qBAAqB;QACrB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;YAC3C,MAAM,GAAG,GAAG,MAAA,MAAC,GAAW,CAAC,OAAO,CAAC,GAAG,0CAAE,IAAI,CAAE,GAAW,CAAC,OAAO,CAAC,mCAAI,SAAS,CAAC;YAC9E,IAAI,GAAG;gBAAE,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACvC,YAAY,GAAI,GAAW,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;QACxD,CAAC;aAAM,CAAC;YACN,0BAA0B;YAC1B,YAAY,GAAG,IAAA,iBAAO,GAAE,CAAC,QAAQ,EAAE,CAAC;QACtC,CAAC;QAED,MAAM,SAAS,GAA0B,EAAE,CAAC;QAC5C,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACrE,MAAM,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,4FAA4F;QAC5F,IAAI,GAAG,GAAkB,IAAI,CAAC;QAC9B,MAAM,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,GAAG;YAAE,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;QACvE,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,mCAAmC;YACnC,yEAAyE;YACzE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QACxB,CAAC;QACH,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACrD,MAAM,GAAG,YAAY,CAAC;QACxB,CAAC;QACD,2EAA2E;QAC3E,IAAI,MAAM,GAAG,MAAM,IAAA,uBAAa,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,oDAAoD,GAAG,mBAAmB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;YACxH,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7B,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;oBACtB,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzB,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACrC,MAAM,UAAU,GAAG,GAAG,OAAO,IAAI,GAAG,EAAE,CAAC;oBACvC,MAAM,GAAG,MAAM,IAAA,uBAAa,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBACjD,IAAI,MAAM;wBAAE,OAAO,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBAC/E,CAAC;YACH,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,SAAS;YACX,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,+EAA+E;gBAC/E,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;oBAC1C,IAAI,CAAC;wBACH,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC7B,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;4BACtB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACzD,MAAM,IAAI,GAAgB,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,EAAS,CAAC;4BACzG,OAAO,CAAC,KAAK,CAAC,yEAAyE,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;4BAChH,OAAO,EAAE,IAAI,EAAE,CAAC;wBAClB,CAAC;oBACH,CAAC;oBAAC,OAAO,CAAC,EAAE,CAAC;wBACX,OAAO,CAAC,KAAK,CAAC,mDAAmD,EAAE,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,OAAO,KAAI,CAAC,CAAC,CAAC;oBACtF,CAAC;gBACH,CAAC;gBACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YACxB,CAAC;QACH,CAAC;QACC,MAAM,IAAI,GAAgB,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC,EAAS,CAAC;QACxG,OAAO,CAAC,KAAK,CAAC,kCAAkC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1E,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACxB,CAAC;AACH,CAAC","names":[],"sources":["C:\\Users\\USER\\Downloads\\Escrow MVP\\src\\lib\\auth.ts"],"sourcesContent":["import { cookies } from 'next/headers';\r\nimport { verifySession } from './session';\r\nimport type { Session, SessionUser, UserRole } from '../types/session';\r\n\r\nexport async function getSessionFromReq(req: Request | { headers?: Record<string, string> } | undefined) : Promise<Session> {\r\n  try {\r\n    // read cookie header\r\n    let cookieHeader = '';\r\n    if (req && 'headers' in req && req.headers) {\r\n      const get = (req as any).headers.get?.bind((req as any).headers) ?? undefined;\r\n      if (get) cookieHeader = get('cookie') || '';\r\n      else cookieHeader = (req as any).headers.cookie || '';\r\n    } else {\r\n      // next server-side helper\r\n      cookieHeader = cookies().toString();\r\n    }\r\n\r\n    const cookieMap: Record<string,string> = {};\r\n    cookieHeader.split(';').map(s => s.trim()).filter(Boolean).forEach(c => {\r\n      const [k, ...rest] = c.split('=');\r\n      cookieMap[k] = rest.join('=');\r\n    });\r\n\r\n    // prefer regex extraction to avoid edge cases where cookie values contain '=' or extra dots\r\n    let raw: string | null = null;\r\n    const m = cookieHeader.match(/(?:^|;\\s*)session=([^;]+)/);\r\n    if (m && m[1]) raw = m[1];\r\n    if (!raw) raw = cookieMap['session'] || cookieMap['escrow_user'] || null;\r\n      if (!raw) {\r\n        // debug: no session cookie present\r\n        // console.debug(`getSessionFromReq: no cookieHeader='${cookieHeader}'`);\r\n        return { user: null };\r\n      }\r\n    let secret = process.env.SESSION_SECRET || '';\r\n    if (!secret && process.env.NODE_ENV !== 'production') {\r\n      secret = 'dev-secret';\r\n    }\r\n    // try verification; if the cookie was mangled (extra dots) try normalizing\r\n    let parsed = await verifySession(raw, secret);\r\n    if (!parsed) {\r\n      console.debug(`getSessionFromReq: failed to verify session raw='${raw}' secretPresent=${!!process.env.SESSION_SECRET}`);\r\n      try {\r\n        const parts = raw.split('.');\r\n        if (parts.length >= 2) {\r\n          const encoded = parts[0];\r\n          const sig = parts.slice(1).join('.');\r\n          const normalized = `${encoded}.${sig}`;\r\n          parsed = await verifySession(normalized, secret);\r\n          if (parsed) console.debug('getSessionFromReq: verified after normalization');\r\n        }\r\n      } catch (e) {\r\n        // ignore\r\n      }\r\n\r\n      if (!parsed) {\r\n        // In non-production environments accept decoding the payload without signature\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          try {\r\n            const parts = raw.split('.');\r\n            if (parts.length >= 1) {\r\n              const decoded = JSON.parse(decodeURIComponent(parts[0]));\r\n              const user: SessionUser = { id: decoded.id, email: decoded.email, role: decoded.role || 'buyer' } as any;\r\n              console.debug('getSessionFromReq: using unsigned session fallback for tests/dev, user=' + JSON.stringify(user));\r\n              return { user };\r\n            }\r\n          } catch (e) {\r\n            console.debug('getSessionFromReq: unsigned fallback parse failed', e?.message || e);\r\n          }\r\n        }\r\n        return { user: null };\r\n      }\r\n    }\r\n      const user: SessionUser = { id: parsed.id, email: parsed.email, role: (parsed.role || 'buyer') } as any;\r\n      console.debug(`getSessionFromReq: parsed user=${JSON.stringify(user)}`);\r\n    return { user };\r\n  } catch (e) {\r\n    return { user: null };\r\n  }\r\n}\r\n\r\n"],"version":3}