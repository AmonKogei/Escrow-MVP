af1424891b06d10b65765ad5d6271eb5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
const prisma_1 = __importDefault(require("../../../lib/prisma"));
const auth_1 = require("../../../lib/auth");
async function handler(req, res) {
    try {
        if (req.method === 'GET') {
            const withdrawals = await prisma_1.default.transaction.findMany({ where: { type: 'WITHDRAWAL' }, orderBy: { createdAt: 'desc' }, take: 50 });
            return res.json({ withdrawals });
        }
        if (req.method === 'POST') {
            const s = await (0, auth_1.getSessionFromReq)(req);
            if (!s.user)
                return res.status(401).json({ message: 'Unauthorized' });
            if (s.user.role.toLowerCase() !== 'seller')
                return res.status(403).json({ message: 'Only sellers can request withdrawals' });
            const { amount, details } = req.body;
            const userId = s.user.id;
            if (!userId || amount == null)
                return res.status(400).json({ message: 'userId and amount required' });
            const num = typeof amount === 'string' ? Number(amount) : amount;
            if (isNaN(num) || num <= 0)
                return res.status(400).json({ message: 'amount must be a positive number' });
            const u = await prisma_1.default.user.findUnique({ where: { id: userId } });
            if (!u)
                return res.status(400).json({ message: 'user not found' });
            const tx = await prisma_1.default.transaction.create({ data: {
                    userId,
                    type: 'WITHDRAWAL',
                    status: 'PENDING',
                    amount: num,
                    details: details || { method: 'MANUAL' },
                    externalRef: `WD-${Date.now()}`
                } });
            return res.status(201).json({ withdrawal: tx });
        }
        return res.status(405).end();
    }
    catch (e) {
        return res.status(500).json({ message: (e === null || e === void 0 ? void 0 : e.message) || String(e) });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xccGFnZXNcXGFwaVxcd2l0aGRyYXdhbHNcXGluZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsMEJBa0NDO0FBckNELGlFQUF5QztBQUN6Qyw0Q0FBc0Q7QUFFdkMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxHQUFtQixFQUFFLEdBQW9CO0lBQzdFLElBQUksQ0FBQztRQUNILElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUN6QixNQUFNLFdBQVcsR0FBRyxNQUFNLGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbkksT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQSx3QkFBaUIsRUFBQyxHQUFVLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUTtnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLENBQUMsQ0FBQztZQUU3SCxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDckMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSTtnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLENBQUMsQ0FBQztZQUN0RyxNQUFNLEdBQUcsR0FBRyxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ2pFLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsQ0FBQyxDQUFDO1lBRXpHLE1BQU0sQ0FBQyxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsQ0FBQztnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztZQUVuRSxNQUFNLEVBQUUsR0FBRyxNQUFNLGdCQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRTtvQkFDakQsTUFBTTtvQkFDTixJQUFJLEVBQUUsWUFBWTtvQkFDbEIsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLE1BQU0sRUFBRSxHQUFHO29CQUNYLE9BQU8sRUFBRSxPQUFPLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO29CQUN4QyxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7aUJBQ2hDLEVBQUMsQ0FBQyxDQUFDO1lBQ0osT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFBLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxPQUFPLEtBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTRVJcXERvd25sb2Fkc1xcRXNjcm93IE1WUFxcc3JjXFxwYWdlc1xcYXBpXFx3aXRoZHJhd2Fsc1xcaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xyXG5pbXBvcnQgcHJpc21hIGZyb20gJy4uLy4uLy4uL2xpYi9wcmlzbWEnO1xyXG5pbXBvcnQgeyBnZXRTZXNzaW9uRnJvbVJlcSB9IGZyb20gJy4uLy4uLy4uL2xpYi9hdXRoJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcclxuICB0cnkge1xyXG4gICAgaWYgKHJlcS5tZXRob2QgPT09ICdHRVQnKSB7XHJcbiAgICAgIGNvbnN0IHdpdGhkcmF3YWxzID0gYXdhaXQgcHJpc21hLnRyYW5zYWN0aW9uLmZpbmRNYW55KHsgd2hlcmU6IHsgdHlwZTogJ1dJVEhEUkFXQUwnIH0sIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSwgdGFrZTogNTAgfSk7XHJcbiAgICAgIHJldHVybiByZXMuanNvbih7IHdpdGhkcmF3YWxzIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgICBjb25zdCBzID0gYXdhaXQgZ2V0U2Vzc2lvbkZyb21SZXEocmVxIGFzIGFueSk7XHJcbiAgICAgIGlmICghcy51c2VyKSByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAnVW5hdXRob3JpemVkJyB9KTtcclxuICAgICAgaWYgKHMudXNlci5yb2xlLnRvTG93ZXJDYXNlKCkgIT09ICdzZWxsZXInKSByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnT25seSBzZWxsZXJzIGNhbiByZXF1ZXN0IHdpdGhkcmF3YWxzJyB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHsgYW1vdW50LCBkZXRhaWxzIH0gPSByZXEuYm9keTtcclxuICAgICAgY29uc3QgdXNlcklkID0gcy51c2VyLmlkO1xyXG4gICAgICBpZiAoIXVzZXJJZCB8fCBhbW91bnQgPT0gbnVsbCkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ3VzZXJJZCBhbmQgYW1vdW50IHJlcXVpcmVkJyB9KTtcclxuICAgICAgY29uc3QgbnVtID0gdHlwZW9mIGFtb3VudCA9PT0gJ3N0cmluZycgPyBOdW1iZXIoYW1vdW50KSA6IGFtb3VudDtcclxuICAgICAgaWYgKGlzTmFOKG51bSkgfHwgbnVtIDw9IDApIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdhbW91bnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicgfSk7XHJcblxyXG4gICAgICBjb25zdCB1ID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IGlkOiB1c2VySWQgfSB9KTtcclxuICAgICAgaWYgKCF1KSByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAndXNlciBub3QgZm91bmQnIH0pO1xyXG5cclxuICAgICAgY29uc3QgdHggPSBhd2FpdCBwcmlzbWEudHJhbnNhY3Rpb24uY3JlYXRlKHsgZGF0YToge1xyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICB0eXBlOiAnV0lUSERSQVdBTCcsXHJcbiAgICAgICAgc3RhdHVzOiAnUEVORElORycsXHJcbiAgICAgICAgYW1vdW50OiBudW0sXHJcbiAgICAgICAgZGV0YWlsczogZGV0YWlscyB8fCB7IG1ldGhvZDogJ01BTlVBTCcgfSxcclxuICAgICAgICBleHRlcm5hbFJlZjogYFdELSR7RGF0ZS5ub3coKX1gXHJcbiAgICAgIH19KTtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgd2l0aGRyYXdhbDogdHggfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmVuZCgpO1xyXG4gIH0gY2F0Y2ggKGU6IGFueSkge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==