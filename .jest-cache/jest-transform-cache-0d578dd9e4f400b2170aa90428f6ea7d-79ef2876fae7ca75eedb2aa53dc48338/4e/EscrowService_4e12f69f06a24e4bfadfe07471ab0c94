a8676ba87b10b908ea51cabeb717908e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logAudit = exports.EscrowService = void 0;
// src/lib/services/EscrowService.ts
const library_1 = require("@prisma/client/runtime/library");
const prisma_1 = __importDefault(require("../prisma"));
const client_1 = require("@prisma/client");
// Helper function to get the current user ID (stub for a real auth implementation)
const getUserIdFromAuth = (role) => {
    // In a real app, this would come from a session/JWT
    // For the seed data:
    if (role === client_1.UserRole.BUYER)
        return 'buyer-uuid';
    if (role === client_1.UserRole.SELLER)
        return 'seller-uuid';
    if (role === client_1.UserRole.ADMIN)
        return 'admin-uuid';
    throw new Error("Invalid User Role for stub.");
};
class EscrowService {
    /**
     * Buyer creates an escrow and locks funds from their balance.
     * ACID: Uses a transaction to ensure balance deduction and escrow creation are atomic.
     * @param buyerId The ID of the buyer.
     * @param sellerId The ID of the seller.
     * @param amount The amount to lock.
     * @param description A description of the transaction.
     */
    static async createEscrow(buyerId, sellerId, amount, description) {
        const amountDecimal = new library_1.Decimal(amount);
        // Use a DB transaction for ACID compliance
        return prisma_1.default.$transaction(async (tx) => {
            // 1. Lock the buyer's row to prevent race conditions on balance
            // NOTE: Prisma client doesn't directly support `SELECT FOR UPDATE` in all versions
            // but the transaction ensures serializable isolation is possible. 
            // For true row-level locking, you'd use raw SQL or a dedicated lock manager (Redis).
            // We simulate safety here by performing a check and then update.
            const buyer = await tx.user.findUniqueOrThrow({
                where: { id: buyerId }
            });
            // Safety check: Prevent lock if insufficient funds
            if (buyer.balance.lessThan(amountDecimal)) {
                throw new Error('Insufficient balance to create escrow.');
            }
            // 2. Deduct funds from Buyer's balance
            const newBuyerBalance = buyer.balance.minus(amountDecimal);
            await tx.user.update({
                where: { id: buyerId },
                data: { balance: newBuyerBalance }
            });
            // 3. Create the Escrow record (status = HOLD)
            const escrow = await tx.escrow.create({
                data: {
                    buyerId,
                    sellerId,
                    amount: amountDecimal,
                    description,
                    status: client_1.EscrowStatus.HOLD,
                }
            });
            // 4. Create an internal transaction and audit log
            await tx.transaction.create({
                data: {
                    userId: buyerId,
                    type: client_1.TransactionType.ESCROW_LOCK,
                    status: client_1.TransactionStatus.COMPLETED,
                    amount: amountDecimal.negated(), // Negative for deduction
                    details: { escrowId: escrow.id },
                    escrowId: escrow.id,
                }
            });
            await (0, exports.logAudit)(tx, buyerId, 'ESCROW_CREATED', escrow.id, { oldBalance: buyer.balance, newBalance: newBuyerBalance });
            return escrow;
        });
    }
    /**
     * Buyer releases funds to the Seller.
     * ACID: Uses a transaction and status checks to prevent double-release.
     * @param escrowId The ID of the escrow to release.
     * @param buyerId The ID of the user requesting the release (must be the buyer).
     */
    static async releaseEscrow(escrowId, buyerId) {
        return prisma_1.default.$transaction(async (tx) => {
            // 1. Check and lock the Escrow row
            const escrow = await tx.escrow.findUniqueOrThrow({
                where: { id: escrowId },
                select: { id: true, status: true, buyerId: true, sellerId: true, amount: true }
            });
            // Safety check: Prevent double-release and release in wrong state
            if (escrow.buyerId !== buyerId) {
                throw new Error('Only the Buyer can release the escrow.');
            }
            if (escrow.status !== client_1.EscrowStatus.HOLD) {
                throw new Error(`Escrow is not in HOLD status. Current status: ${escrow.status}.`);
            }
            const amountDecimal = escrow.amount;
            // 2. Update Escrow status to RELEASED
            await tx.escrow.update({
                where: { id: escrowId },
                data: { status: client_1.EscrowStatus.RELEASED }
            });
            // 3. Credit Seller's platform balance
            const seller = await tx.user.update({
                where: { id: escrow.sellerId },
                data: { balance: { increment: amountDecimal } },
                select: { balance: true }
            });
            // 4. Create internal transaction and audit log
            await tx.transaction.create({
                data: {
                    userId: escrow.sellerId,
                    type: client_1.TransactionType.ESCROW_RELEASE,
                    status: client_1.TransactionStatus.COMPLETED,
                    amount: amountDecimal,
                    details: { escrowId: escrow.id },
                    escrowId: escrow.id,
                }
            });
            await (0, exports.logAudit)(tx, buyerId, 'ESCROW_RELEASED', escrow.id, { sellerNewBalance: seller.balance });
            return escrow;
        });
    }
    /**
     * Buyer or Seller raises a dispute. Locks the funds.
     */
    static async raiseDispute(escrowId, userId, reason) {
        return prisma_1.default.$transaction(async (tx) => {
            const escrow = await tx.escrow.findUniqueOrThrow({
                where: { id: escrowId },
            });
            if (escrow.buyerId !== userId && escrow.sellerId !== userId) {
                throw new Error('Only the Buyer or Seller can raise a dispute.');
            }
            if (escrow.status !== client_1.EscrowStatus.HOLD) {
                throw new Error('Dispute can only be raised on an active (HOLD) escrow.');
            }
            // 1. Update Escrow status to DISPUTED
            const updatedEscrow = await tx.escrow.update({
                where: { id: escrowId },
                data: {
                    status: client_1.EscrowStatus.DISPUTED,
                    disputeRaised: true,
                    disputeReason: reason,
                }
            });
            // 2. Audit Log
            await (0, exports.logAudit)(tx, userId, 'DISPUTE_RAISED', escrowId, { reason });
            return updatedEscrow;
        });
    }
    /**
     * Admin resolves a dispute (Release to Seller or Refund to Buyer).
     * ACID: Uses transaction to ensure fund movement and status change are atomic.
     */
    static async resolveDispute(adminId, escrowId, resolution) {
        // NOTE: In a real system, we'd check if adminId has the ADMIN role.
        return prisma_1.default.$transaction(async (tx) => {
            const escrow = await tx.escrow.findUniqueOrThrow({
                where: { id: escrowId },
                select: { id: true, status: true, buyerId: true, sellerId: true, amount: true }
            });
            if (escrow.status !== client_1.EscrowStatus.DISPUTED) {
                throw new Error(`Escrow is not in DISPUTED status. Current status: ${escrow.status}.`);
            }
            const amountDecimal = escrow.amount;
            let targetUserId;
            let newStatus;
            let transactionType;
            if (resolution === 'APPROVE') {
                // Funds go to Seller
                targetUserId = escrow.sellerId;
                newStatus = client_1.EscrowStatus.RELEASED;
                transactionType = client_1.TransactionType.ESCROW_RELEASE;
            }
            else { // REJECT (Funds go back to Buyer)
                // Funds go back to Buyer
                targetUserId = escrow.buyerId;
                newStatus = client_1.EscrowStatus.REFUNDED;
                transactionType = client_1.TransactionType.ESCROW_LOCK; // Use LOCK type with positive amount for refund credit
            }
            // 1. Update Escrow status
            const updatedEscrow = await tx.escrow.update({
                where: { id: escrowId },
                data: {
                    status: newStatus,
                    disputeResolvedAt: new Date(),
                }
            });
            // 2. Credit the target user's platform balance
            const targetUser = await tx.user.update({
                where: { id: targetUserId },
                data: { balance: { increment: amountDecimal } },
                select: { balance: true }
            });
            // 3. Create internal transaction and audit log
            await tx.transaction.create({
                data: {
                    userId: targetUserId,
                    type: transactionType,
                    status: client_1.TransactionStatus.COMPLETED,
                    amount: amountDecimal,
                    details: { escrowId: escrow.id, resolution, targetUserId },
                    escrowId: escrow.id,
                }
            });
            await (0, exports.logAudit)(tx, adminId, `DISPUTE_RESOLVED_${resolution}`, escrowId, { targetUserId, newBalance: targetUser.balance });
            return updatedEscrow;
        });
    }
}
exports.EscrowService = EscrowService;
// Minimal Audit Service stub
const logAudit = async (tx, userId, action, entityId = null, details = {}) => {
    await tx.auditLog.create({
        data: {
            userId,
            action,
            entityId,
            newState: details,
        }
    });
};
exports.logAudit = logAudit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,