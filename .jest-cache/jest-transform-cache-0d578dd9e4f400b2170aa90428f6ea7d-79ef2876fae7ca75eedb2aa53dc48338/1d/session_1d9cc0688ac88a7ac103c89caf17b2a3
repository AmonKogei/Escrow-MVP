f68bdb6c16181041728b14d3ec4388c2
"use strict";
// src/lib/session.ts
// Small, runtime-compatible helpers to sign and verify a session cookie.
// This module intentionally does not import Prisma or other server-only libs so it
// can be used from middleware (Edge) and server routes.
Object.defineProperty(exports, "__esModule", { value: true });
exports.signSession = signSession;
exports.verifySession = verifySession;
const toHex = (buf) => Array.from(buf).map(b => b.toString(16).padStart(2, '0')).join('');
async function hmacSha256Hex(message, secret) {
    // Try Node's crypto first
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { createHmac } = require('crypto');
        return createHmac('sha256', secret).update(message).digest('hex');
    }
    catch (e) {
        // Fallback to Web Crypto (Edge runtime)
        const enc = new TextEncoder();
        const key = await globalThis.crypto.subtle.importKey('raw', enc.encode(secret), { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);
        const sig = await globalThis.crypto.subtle.sign('HMAC', key, enc.encode(message));
        return toHex(new Uint8Array(sig));
    }
}
async function signSession(payload, secret) {
    if (!secret) {
        if (process.env.NODE_ENV === 'production') {
            throw new Error('SESSION_SECRET must be set in production');
        }
        console.warn('SESSION_SECRET not provided; using insecure fallback. Set SESSION_SECRET in env for production.');
        secret = 'dev-secret';
    }
    const str = JSON.stringify(payload);
    const encoded = encodeURIComponent(str);
    const sig = await hmacSha256Hex(encoded, secret);
    return `${encoded}.${sig}`;
}
async function verifySession(cookieValue, secret) {
    if (!cookieValue)
        return null;
    if (!secret) {
        if (process.env.NODE_ENV === 'production') {
            // Fail to verify in production without a secret
            return null;
        }
        // Insecure fallback for development/tests
        secret = 'dev-secret';
    }
    const parts = cookieValue.split('.');
    if (parts.length !== 2)
        return null;
    const [encoded, sig] = parts;
    const expected = await hmacSha256Hex(encoded, secret);
    // Timing-safe compare
    try {
        // Node crypto timingSafeEqual
        // Convert hex strings to buffers
        const bufExpected = Buffer.from(expected, 'hex');
        const bufSig = Buffer.from(sig, 'hex');
        if (bufExpected.length !== bufSig.length)
            return null;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { timingSafeEqual } = require('crypto');
        if (!timingSafeEqual(bufExpected, bufSig)) {
            console.debug('verifySession: timingSafeEqual failed', {
                encoded: encoded.slice(0, 120),
                providedSig: sig,
                expectedSig: expected,
                secretPresent: !!process.env.SESSION_SECRET
            });
            return null;
        }
    }
    catch (e) {
        // Fallback: constant-time string compare
        let mismatch = 0;
        if (expected.length !== sig.length) {
            console.debug(`verifySession: length mismatch expected=${expected.length} got=${sig.length} secretPresent=${!!process.env.SESSION_SECRET}`);
            return null;
        }
        for (let i = 0; i < expected.length; i++) {
            mismatch |= expected.charCodeAt(i) ^ sig.charCodeAt(i);
        }
        if (mismatch !== 0) {
            console.debug(`verifySession: fallback mismatch expected=${expected.slice(0, 8)} got=${sig.slice(0, 8)} secretPresent=${!!process.env.SESSION_SECRET}`);
            return null;
        }
    }
    // debug: verification succeeded
    // console.debug(`verifySession: ok expected=${expected.slice(0,8)} got=${sig.slice(0,8)}`);
    try {
        const parsed = JSON.parse(decodeURIComponent(encoded));
        return parsed;
    }
    catch (e) {
        return null;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,