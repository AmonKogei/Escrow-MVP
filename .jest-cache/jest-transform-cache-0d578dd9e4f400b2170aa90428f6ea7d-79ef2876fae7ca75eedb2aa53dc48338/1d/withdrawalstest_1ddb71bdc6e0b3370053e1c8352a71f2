7e8a24ab2070ad06679ef2228656113f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_mocks_http_1 = require("node-mocks-http");
const index_1 = __importDefault(require("../../src/pages/api/withdrawals/index"));
const session_1 = require("../../src/lib/session");
const SECRET = process.env.SESSION_SECRET || 'dev-secret';
describe('POST /api/withdrawals', () => {
    test('returns 401 when no session cookie', async () => {
        const { req, res } = (0, node_mocks_http_1.createMocks)({ method: 'POST', body: { amount: 100 } });
        await (0, index_1.default)(req, res);
        expect(res._getStatusCode()).toBe(401);
    });
    test('creates withdrawal when authenticated seller', async () => {
        // ensure a seller exists
        let seller = await prisma.user.findFirst({ where: { role: 'SELLER' } });
        if (!seller) {
            seller = await prisma.user.create({ data: { email: 'test-seller@local', role: 'SELLER', passwordHash: 'x' } });
        }
        const payload = { id: seller.id, email: seller.email, role: 'seller' };
        const cookie = await (0, session_1.signSession)(payload, SECRET);
        const { req, res } = (0, node_mocks_http_1.createMocks)({ method: 'POST', body: { amount: 123 }, headers: { cookie: `session=${cookie}` } });
        await (0, index_1.default)(req, res);
        expect([200, 201]).toContain(res._getStatusCode());
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHRlc3RzXFxhcGlcXHdpdGhkcmF3YWxzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBOEM7QUFDOUMsa0ZBQTREO0FBQzVELG1EQUFvRDtBQUVwRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxZQUFZLENBQUM7QUFFMUQsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxJQUFJLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDcEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFBLDZCQUFXLEVBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUUsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFVLEVBQUUsR0FBVSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5RCx5QkFBeUI7UUFDekIsSUFBSSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQVMsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ1osTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3hILENBQUM7UUFDRCxNQUFNLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUN2RSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEscUJBQVcsRUFBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFBLDZCQUFXLEVBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0SCxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQVUsRUFBRSxHQUFVLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTRVJcXERvd25sb2Fkc1xcRXNjcm93IE1WUFxcdGVzdHNcXGFwaVxcd2l0aGRyYXdhbHMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVNb2NrcyB9IGZyb20gJ25vZGUtbW9ja3MtaHR0cCc7XHJcbmltcG9ydCBoYW5kbGVyIGZyb20gJy4uLy4uL3NyYy9wYWdlcy9hcGkvd2l0aGRyYXdhbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBzaWduU2Vzc2lvbiB9IGZyb20gJy4uLy4uL3NyYy9saWIvc2Vzc2lvbic7XHJcblxyXG5jb25zdCBTRUNSRVQgPSBwcm9jZXNzLmVudi5TRVNTSU9OX1NFQ1JFVCB8fCAnZGV2LXNlY3JldCc7XHJcblxyXG5kZXNjcmliZSgnUE9TVCAvYXBpL3dpdGhkcmF3YWxzJywgKCkgPT4ge1xyXG4gIHRlc3QoJ3JldHVybnMgNDAxIHdoZW4gbm8gc2Vzc2lvbiBjb29raWUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjcmVhdGVNb2Nrcyh7IG1ldGhvZDogJ1BPU1QnLCBib2R5OiB7IGFtb3VudDogMTAwIH0gfSk7XHJcbiAgICBhd2FpdCBoYW5kbGVyKHJlcSBhcyBhbnksIHJlcyBhcyBhbnkpO1xyXG4gICAgZXhwZWN0KHJlcy5fZ2V0U3RhdHVzQ29kZSgpKS50b0JlKDQwMSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2NyZWF0ZXMgd2l0aGRyYXdhbCB3aGVuIGF1dGhlbnRpY2F0ZWQgc2VsbGVyJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gZW5zdXJlIGEgc2VsbGVyIGV4aXN0c1xyXG4gICAgbGV0IHNlbGxlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRGaXJzdCh7IHdoZXJlOiB7IHJvbGU6ICdTRUxMRVInIH0gYXMgYW55IH0pO1xyXG4gICAgaWYgKCFzZWxsZXIpIHtcclxuICAgICAgc2VsbGVyID0gYXdhaXQgcHJpc21hLnVzZXIuY3JlYXRlKHsgZGF0YTogeyBlbWFpbDogJ3Rlc3Qtc2VsbGVyQGxvY2FsJywgcm9sZTogJ1NFTExFUicsIHBhc3N3b3JkSGFzaDogJ3gnIH0gYXMgYW55IH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF5bG9hZCA9IHsgaWQ6IHNlbGxlci5pZCwgZW1haWw6IHNlbGxlci5lbWFpbCwgcm9sZTogJ3NlbGxlcicgfTtcclxuICAgIGNvbnN0IGNvb2tpZSA9IGF3YWl0IHNpZ25TZXNzaW9uKHBheWxvYWQsIFNFQ1JFVCk7XHJcbiAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjcmVhdGVNb2Nrcyh7IG1ldGhvZDogJ1BPU1QnLCBib2R5OiB7IGFtb3VudDogMTIzIH0sIGhlYWRlcnM6IHsgY29va2llOiBgc2Vzc2lvbj0ke2Nvb2tpZX1gIH0gfSk7XHJcbiAgICBhd2FpdCBoYW5kbGVyKHJlcSBhcyBhbnksIHJlcyBhcyBhbnkpO1xyXG4gICAgZXhwZWN0KFsyMDAsMjAxXSkudG9Db250YWluKHJlcy5fZ2V0U3RhdHVzQ29kZSgpKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==