aa5a33e433a3c046be5efd7e5b563779
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
const prisma_1 = __importDefault(require("../../../lib/prisma"));
const auth_1 = require("../../../lib/auth");
async function handler(req, res) {
    try {
        if (req.method === 'GET') {
            const deposits = await prisma_1.default.transaction.findMany({ where: { type: 'DEPOSIT' }, orderBy: { createdAt: 'desc' }, take: 50 });
            return res.json({ deposits });
        }
        if (req.method === 'POST') {
            // require authenticated buyer
            const s = await (0, auth_1.getSessionFromReq)(req);
            if (!s.user)
                return res.status(401).json({ message: 'Unauthorized' });
            if (s.user.role.toLowerCase() !== 'buyer')
                return res.status(403).json({ message: 'Only buyers can create deposits' });
            const { amount, externalRef } = req.body;
            const userId = s.user.id;
            if (!userId || amount == null)
                return res.status(400).json({ message: 'userId and amount required' });
            const num = typeof amount === 'string' ? Number(amount) : amount;
            if (isNaN(num) || num <= 0)
                return res.status(400).json({ message: 'amount must be a positive number' });
            // Ensure user exists
            const u = await prisma_1.default.user.findUnique({ where: { id: userId } });
            if (!u)
                return res.status(400).json({ message: 'user not found' });
            const tx = await prisma_1.default.transaction.create({ data: {
                    userId,
                    type: 'DEPOSIT',
                    status: 'COMPLETED',
                    amount: num,
                    details: { channel: 'MANUAL' },
                    externalRef: externalRef || `DEP-${Date.now()}`
                } });
            return res.status(201).json({ deposit: tx });
        }
        return res.status(405).end();
    }
    catch (e) {
        return res.status(500).json({ message: (e === null || e === void 0 ? void 0 : e.message) || String(e) });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xccGFnZXNcXGFwaVxcZGVwb3NpdHNcXGluZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsMEJBcUNDO0FBeENELGlFQUF5QztBQUN6Qyw0Q0FBc0Q7QUFFdkMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxHQUFtQixFQUFFLEdBQW9CO0lBQzdFLElBQUksQ0FBQztRQUNILElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUN6QixNQUFNLFFBQVEsR0FBRyxNQUFNLGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0gsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzFCLDhCQUE4QjtZQUM5QixNQUFNLENBQUMsR0FBRyxNQUFNLElBQUEsd0JBQWlCLEVBQUMsR0FBVSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU87Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxDQUFDLENBQUM7WUFFM0gsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxJQUFJLElBQUk7Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxDQUFDLENBQUM7WUFDdEcsTUFBTSxHQUFHLEdBQUcsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNqRSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLENBQUMsQ0FBQztZQUV6RyxxQkFBcUI7WUFDckIsTUFBTSxDQUFDLEdBQUcsTUFBTSxnQkFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxDQUFDO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sRUFBRSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFO29CQUNqRCxNQUFNO29CQUNOLElBQUksRUFBRSxTQUFTO29CQUNmLE1BQU0sRUFBRSxXQUFXO29CQUNuQixNQUFNLEVBQUUsR0FBRztvQkFDWCxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO29CQUM5QixXQUFXLEVBQUUsV0FBVyxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFO2lCQUNoRCxFQUFDLENBQUMsQ0FBQztZQUNKLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBRUQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQSxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsT0FBTyxLQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xccGFnZXNcXGFwaVxcZGVwb3NpdHNcXGluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcclxuaW1wb3J0IHByaXNtYSBmcm9tICcuLi8uLi8uLi9saWIvcHJpc21hJztcclxuaW1wb3J0IHsgZ2V0U2Vzc2lvbkZyb21SZXEgfSBmcm9tICcuLi8uLi8uLi9saWIvYXV0aCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChyZXEubWV0aG9kID09PSAnR0VUJykge1xyXG4gICAgICBjb25zdCBkZXBvc2l0cyA9IGF3YWl0IHByaXNtYS50cmFuc2FjdGlvbi5maW5kTWFueSh7IHdoZXJlOiB7IHR5cGU6ICdERVBPU0lUJyB9LCBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sIHRha2U6IDUwIH0pO1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oeyBkZXBvc2l0cyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7XHJcbiAgICAgIC8vIHJlcXVpcmUgYXV0aGVudGljYXRlZCBidXllclxyXG4gICAgICBjb25zdCBzID0gYXdhaXQgZ2V0U2Vzc2lvbkZyb21SZXEocmVxIGFzIGFueSk7XHJcbiAgICAgIGlmICghcy51c2VyKSByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAnVW5hdXRob3JpemVkJyB9KTtcclxuICAgICAgaWYgKHMudXNlci5yb2xlLnRvTG93ZXJDYXNlKCkgIT09ICdidXllcicpIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG1lc3NhZ2U6ICdPbmx5IGJ1eWVycyBjYW4gY3JlYXRlIGRlcG9zaXRzJyB9KTtcclxuXHJcbiAgY29uc3QgeyBhbW91bnQsIGV4dGVybmFsUmVmIH0gPSByZXEuYm9keTtcclxuICBjb25zdCB1c2VySWQgPSBzLnVzZXIuaWQ7XHJcbiAgaWYgKCF1c2VySWQgfHwgYW1vdW50ID09IG51bGwpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICd1c2VySWQgYW5kIGFtb3VudCByZXF1aXJlZCcgfSk7XHJcbiAgY29uc3QgbnVtID0gdHlwZW9mIGFtb3VudCA9PT0gJ3N0cmluZycgPyBOdW1iZXIoYW1vdW50KSA6IGFtb3VudDtcclxuICBpZiAoaXNOYU4obnVtKSB8fCBudW0gPD0gMCkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ2Ftb3VudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyB9KTtcclxuXHJcbiAgLy8gRW5zdXJlIHVzZXIgZXhpc3RzXHJcbiAgY29uc3QgdSA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoeyB3aGVyZTogeyBpZDogdXNlcklkIH0gfSk7XHJcbiAgaWYgKCF1KSByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAndXNlciBub3QgZm91bmQnIH0pO1xyXG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHByaXNtYS50cmFuc2FjdGlvbi5jcmVhdGUoeyBkYXRhOiB7XHJcbiAgICAgICAgdXNlcklkLFxyXG4gICAgICAgIHR5cGU6ICdERVBPU0lUJyxcclxuICAgICAgICBzdGF0dXM6ICdDT01QTEVURUQnLFxyXG4gICAgICAgIGFtb3VudDogbnVtLFxyXG4gICAgICAgIGRldGFpbHM6IHsgY2hhbm5lbDogJ01BTlVBTCcgfSxcclxuICAgICAgICBleHRlcm5hbFJlZjogZXh0ZXJuYWxSZWYgfHwgYERFUC0ke0RhdGUubm93KCl9YFxyXG4gICAgICB9fSk7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7IGRlcG9zaXQ6IHR4IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuZW5kKCk7XHJcbiAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlPy5tZXNzYWdlIHx8IFN0cmluZyhlKSB9KTtcclxuICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9