d7f64080d645332412aac1d484b1b5fc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
const prisma_1 = __importDefault(require("../../../lib/prisma"));
const auth_1 = require("../../../../src/lib/auth");
async function handler(req, res) {
    try {
        if (req.method === 'GET') {
            const withdrawals = await prisma_1.default.transaction.findMany({ where: { type: 'WITHDRAWAL' }, orderBy: { createdAt: 'desc' }, take: 50 });
            return res.json({ withdrawals });
        }
        if (req.method === 'POST') {
            const s = await (0, auth_1.getSessionFromReq)(req);
            if (!s.user)
                return res.status(401).json({ message: 'Unauthorized' });
            if (s.user.role.toLowerCase() !== 'seller')
                return res.status(403).json({ message: 'Only sellers can request withdrawals' });
            const { amount, details } = req.body;
            const userId = s.user.id;
            if (!userId || amount == null)
                return res.status(400).json({ message: 'userId and amount required' });
            const num = typeof amount === 'string' ? Number(amount) : amount;
            if (isNaN(num) || num <= 0)
                return res.status(400).json({ message: 'amount must be a positive number' });
            const u = await prisma_1.default.user.findUnique({ where: { id: userId } });
            if (!u)
                return res.status(400).json({ message: 'user not found' });
            const tx = await prisma_1.default.transaction.create({ data: {
                    userId,
                    type: 'WITHDRAWAL',
                    status: 'PENDING',
                    amount: num,
                    details: details || { method: 'MANUAL' },
                    externalRef: `WD-${Date.now()}`
                } });
            return res.status(201).json({ withdrawal: tx });
        }
        return res.status(405).end();
    }
    catch (e) {
        return res.status(500).json({ message: (e === null || e === void 0 ? void 0 : e.message) || String(e) });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xccGFnZXNcXGFwaVxcd2l0aGRyYXdhbHNcXGluZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsMEJBa0NDO0FBckNELGlFQUF5QztBQUN6QyxtREFBNkQ7QUFFOUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxHQUFtQixFQUFFLEdBQW9CO0lBQzdFLElBQUksQ0FBQztRQUNILElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUN6QixNQUFNLFdBQVcsR0FBRyxNQUFNLGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbkksT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQSx3QkFBaUIsRUFBQyxHQUFVLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUTtnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLENBQUMsQ0FBQztZQUU3SCxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDckMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSTtnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLENBQUMsQ0FBQztZQUN0RyxNQUFNLEdBQUcsR0FBRyxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ2pFLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsQ0FBQyxDQUFDO1lBRXpHLE1BQU0sQ0FBQyxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsQ0FBQztnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztZQUVuRSxNQUFNLEVBQUUsR0FBRyxNQUFNLGdCQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRTtvQkFDakQsTUFBTTtvQkFDTixJQUFJLEVBQUUsWUFBWTtvQkFDbEIsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLE1BQU0sRUFBRSxHQUFHO29CQUNYLE9BQU8sRUFBRSxPQUFPLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO29CQUN4QyxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7aUJBQ2hDLEVBQUMsQ0FBQyxDQUFDO1lBQ0osT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFBLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxPQUFPLEtBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTRVJcXERvd25sb2Fkc1xcRXNjcm93IE1WUFxcc3JjXFxwYWdlc1xcYXBpXFx3aXRoZHJhd2Fsc1xcaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xyXG5pbXBvcnQgcHJpc21hIGZyb20gJy4uLy4uLy4uL2xpYi9wcmlzbWEnO1xyXG5pbXBvcnQgeyBnZXRTZXNzaW9uRnJvbVJlcSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChyZXEubWV0aG9kID09PSAnR0VUJykge1xyXG4gICAgICBjb25zdCB3aXRoZHJhd2FscyA9IGF3YWl0IHByaXNtYS50cmFuc2FjdGlvbi5maW5kTWFueSh7IHdoZXJlOiB7IHR5cGU6ICdXSVRIRFJBV0FMJyB9LCBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sIHRha2U6IDUwIH0pO1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oeyB3aXRoZHJhd2FscyB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcpIHtcclxuICAgICAgY29uc3QgcyA9IGF3YWl0IGdldFNlc3Npb25Gcm9tUmVxKHJlcSBhcyBhbnkpO1xyXG4gICAgICBpZiAoIXMudXNlcikgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ1VuYXV0aG9yaXplZCcgfSk7XHJcbiAgICAgIGlmIChzLnVzZXIucm9sZS50b0xvd2VyQ2FzZSgpICE9PSAnc2VsbGVyJykgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ09ubHkgc2VsbGVycyBjYW4gcmVxdWVzdCB3aXRoZHJhd2FscycgfSk7XHJcblxyXG4gICAgICBjb25zdCB7IGFtb3VudCwgZGV0YWlscyB9ID0gcmVxLmJvZHk7XHJcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHMudXNlci5pZDtcclxuICAgICAgaWYgKCF1c2VySWQgfHwgYW1vdW50ID09IG51bGwpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICd1c2VySWQgYW5kIGFtb3VudCByZXF1aXJlZCcgfSk7XHJcbiAgICAgIGNvbnN0IG51bSA9IHR5cGVvZiBhbW91bnQgPT09ICdzdHJpbmcnID8gTnVtYmVyKGFtb3VudCkgOiBhbW91bnQ7XHJcbiAgICAgIGlmIChpc05hTihudW0pIHx8IG51bSA8PSAwKSByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnYW1vdW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInIH0pO1xyXG5cclxuICAgICAgY29uc3QgdSA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoeyB3aGVyZTogeyBpZDogdXNlcklkIH0gfSk7XHJcbiAgICAgIGlmICghdSkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ3VzZXIgbm90IGZvdW5kJyB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcHJpc21hLnRyYW5zYWN0aW9uLmNyZWF0ZSh7IGRhdGE6IHtcclxuICAgICAgICB1c2VySWQsXHJcbiAgICAgICAgdHlwZTogJ1dJVEhEUkFXQUwnLFxyXG4gICAgICAgIHN0YXR1czogJ1BFTkRJTkcnLFxyXG4gICAgICAgIGFtb3VudDogbnVtLFxyXG4gICAgICAgIGRldGFpbHM6IGRldGFpbHMgfHwgeyBtZXRob2Q6ICdNQU5VQUwnIH0sXHJcbiAgICAgICAgZXh0ZXJuYWxSZWY6IGBXRC0ke0RhdGUubm93KCl9YFxyXG4gICAgICB9fSk7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7IHdpdGhkcmF3YWw6IHR4IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5lbmQoKTtcclxuICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGU/Lm1lc3NhZ2UgfHwgU3RyaW5nKGUpIH0pO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=