{"file":"C:\\Users\\USER\\Downloads\\Escrow MVP\\tests\\escrow.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\USER\\Downloads\\Escrow MVP\\tests\\escrow.test.ts"],"sourcesContent":["// tests/escrow.test.ts\r\n// Minimal globals to satisfy TypeScript without installing Jest types in this MVP\r\ndeclare const describe: any;\r\ndeclare const it: any;\r\ndeclare const expect: any;\r\ndeclare const beforeAll: any;\r\ndeclare const afterAll: any;\r\nimport { EscrowService } from '../src/lib/services/EscrowService'; // Import the core service logic\r\nimport prisma from '../src/lib/prisma';\r\nimport { EscrowStatus } from '@prisma/client';\r\n\r\n// Helper IDs from the seed script\r\nconst BUYER_ID = 'buyer-uuid';\r\nconst SELLER_ID = 'seller-uuid';\r\nconst ADMIN_ID = 'admin-uuid';\r\n\r\ndescribe('Escrow Critical Financial Flows', () => {\r\n\r\n    // Helper to get fresh user data\r\n    const getUser = (id: string) => prisma.user.findUniqueOrThrow({ where: { id } });\r\n\r\n    // Ensure the database is clean before running tests (optional, but good practice)\r\n    beforeAll(async () => {\r\n        // Run seed or ensure test accounts exist with known balances\r\n        // For simplicity, we assume seed has run and balances are known:\r\n        // Buyer: 4000 (after initial 1000 lock), Seller: 0\r\n    });\r\n\r\n    afterAll(async () => {\r\n        await prisma.$disconnect();\r\n    });\r\n\r\n    // Test 1: Successful Escrow Creation (Locking Funds)\r\n    it('should successfully create an escrow and lock buyer funds atomically', async () => {\r\n        const initialBuyer = await getUser(BUYER_ID);\r\n        const lockAmount = 500;\r\n        const initialBalance = initialBuyer.balance.toNumber();\r\n\r\n        const escrow = await EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test lock');\r\n        \r\n        const finalBuyer = await getUser(BUYER_ID);\r\n\r\n        expect(escrow.status).toBe(EscrowStatus.HOLD);\r\n        // Check if balance deduction was atomic\r\n        expect(finalBuyer.balance.toNumber()).toBe(initialBalance - lockAmount); \r\n    });\r\n\r\n    // Test 2: Successful Escrow Release\r\n    it('should successfully release funds to seller and update escrow status atomically', async () => {\r\n        const lockAmount = 100;\r\n        // Setup: Create a new escrow\r\n        const initialBuyer = await getUser(BUYER_ID);\r\n        await EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test release setup'); \r\n        \r\n        const initialSeller = await getUser(SELLER_ID);\r\n        const initialSellerBalance = initialSeller.balance.toNumber();\r\n        \r\n        // Action: Release the escrow (Note: we need the ID of the latest escrow)\r\n        const activeEscrow = await prisma.escrow.findFirstOrThrow({ \r\n            where: { buyerId: BUYER_ID, status: EscrowStatus.HOLD }, \r\n            orderBy: { createdAt: 'desc' } \r\n        });\r\n\r\n        const releasedEscrow = await EscrowService.releaseEscrow(activeEscrow.id, BUYER_ID);\r\n        \r\n        const finalSeller = await getUser(SELLER_ID);\r\n\r\n        // Verification\r\n        expect(releasedEscrow.status).toBe(EscrowStatus.RELEASED);\r\n        // Check if seller was credited atomically\r\n        expect(finalSeller.balance.toNumber()).toBe(initialSellerBalance + lockAmount);\r\n    });\r\n\r\n    // Test 3: Dispute Resolution (Refund Buyer)\r\n    it('Admin resolve dispute REJECT should refund funds to buyer atomically', async () => {\r\n        const lockAmount = 200;\r\n        // Setup 1: Create a new escrow\r\n        await EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test dispute setup'); \r\n        const activeEscrow = await prisma.escrow.findFirstOrThrow({ \r\n            where: { buyerId: BUYER_ID, status: EscrowStatus.HOLD }, \r\n            orderBy: { createdAt: 'desc' } \r\n        });\r\n\r\n        // Setup 2: Raise a dispute\r\n        await EscrowService.raiseDispute(activeEscrow.id, BUYER_ID, 'Dispute for refund test');\r\n        const initialBuyer = await getUser(BUYER_ID);\r\n        const initialBuyerBalance = initialBuyer.balance.toNumber();\r\n\r\n        // Action: Admin rejects (Refunds Buyer)\r\n        const resolvedEscrow = await EscrowService.resolveDispute(ADMIN_ID, activeEscrow.id, 'REJECT');\r\n\r\n        const finalBuyer = await getUser(BUYER_ID);\r\n\r\n        // Verification\r\n        expect(resolvedEscrow.status).toBe(EscrowStatus.REFUNDED);\r\n        // Check if buyer was refunded atomically\r\n        expect(finalBuyer.balance.toNumber()).toBe(initialBuyerBalance + lockAmount); \r\n    });\r\n\r\n    // Test 4: Prevent Double-Release\r\n    it('should prevent double-release and throw an error', async () => {\r\n        const lockAmount = 10;\r\n        // Setup: Create a new escrow\r\n        await EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test double-release setup'); \r\n        const activeEscrow = await prisma.escrow.findFirstOrThrow({ \r\n            where: { buyerId: BUYER_ID, status: EscrowStatus.HOLD }, \r\n            orderBy: { createdAt: 'desc' } \r\n        });\r\n\r\n        // 1st Release (Success)\r\n        await EscrowService.releaseEscrow(activeEscrow.id, BUYER_ID);\r\n\r\n        // 2nd Release (Should fail)\r\n        await expect(EscrowService.releaseEscrow(activeEscrow.id, BUYER_ID)).rejects.toThrow(/Escrow is not in HOLD status/);\r\n    });\r\n});"],"version":3}