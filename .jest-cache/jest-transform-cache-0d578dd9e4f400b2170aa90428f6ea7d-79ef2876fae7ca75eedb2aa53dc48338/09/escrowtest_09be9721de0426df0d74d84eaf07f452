bb77c21cef367ef95529d26b2d7fe3f4
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EscrowService_1 = require("../src/lib/services/EscrowService"); // Import the core service logic
const prisma_1 = __importDefault(require("../src/lib/prisma"));
const client_1 = require("@prisma/client");
// Helper IDs from the seed script
const BUYER_ID = 'buyer-uuid';
const SELLER_ID = 'seller-uuid';
const ADMIN_ID = 'admin-uuid';
describe('Escrow Critical Financial Flows', () => {
    // Helper to get fresh user data
    const getUser = (id) => prisma_1.default.user.findUniqueOrThrow({ where: { id } });
    // Ensure the database is clean before running tests (optional, but good practice)
    beforeAll(async () => {
        // Run seed or ensure test accounts exist with known balances
        // For simplicity, we assume seed has run and balances are known:
        // Buyer: 4000 (after initial 1000 lock), Seller: 0
    });
    afterAll(async () => {
        await prisma_1.default.$disconnect();
    });
    // Test 1: Successful Escrow Creation (Locking Funds)
    it('should successfully create an escrow and lock buyer funds atomically', async () => {
        const initialBuyer = await getUser(BUYER_ID);
        const lockAmount = 500;
        const initialBalance = initialBuyer.balance.toNumber();
        const escrow = await EscrowService_1.EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test lock');
        const finalBuyer = await getUser(BUYER_ID);
        expect(escrow.status).toBe(client_1.EscrowStatus.HOLD);
        // Check if balance deduction was atomic
        expect(finalBuyer.balance.toNumber()).toBe(initialBalance - lockAmount);
    });
    // Test 2: Successful Escrow Release
    it('should successfully release funds to seller and update escrow status atomically', async () => {
        const lockAmount = 100;
        // Setup: Create a new escrow
        const initialBuyer = await getUser(BUYER_ID);
        await EscrowService_1.EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test release setup');
        const initialSeller = await getUser(SELLER_ID);
        const initialSellerBalance = initialSeller.balance.toNumber();
        // Action: Release the escrow (Note: we need the ID of the latest escrow)
        const activeEscrow = await prisma_1.default.escrow.findFirstOrThrow({
            where: { buyerId: BUYER_ID, status: client_1.EscrowStatus.HOLD },
            orderBy: { createdAt: 'desc' }
        });
        const releasedEscrow = await EscrowService_1.EscrowService.releaseEscrow(activeEscrow.id, BUYER_ID);
        const finalSeller = await getUser(SELLER_ID);
        // Verification
        expect(releasedEscrow.status).toBe(client_1.EscrowStatus.RELEASED);
        // Check if seller was credited atomically
        expect(finalSeller.balance.toNumber()).toBe(initialSellerBalance + lockAmount);
    });
    // Test 3: Dispute Resolution (Refund Buyer)
    it('Admin resolve dispute REJECT should refund funds to buyer atomically', async () => {
        const lockAmount = 200;
        // Setup 1: Create a new escrow
        await EscrowService_1.EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test dispute setup');
        const activeEscrow = await prisma_1.default.escrow.findFirstOrThrow({
            where: { buyerId: BUYER_ID, status: client_1.EscrowStatus.HOLD },
            orderBy: { createdAt: 'desc' }
        });
        // Setup 2: Raise a dispute
        await EscrowService_1.EscrowService.raiseDispute(activeEscrow.id, BUYER_ID, 'Dispute for refund test');
        const initialBuyer = await getUser(BUYER_ID);
        const initialBuyerBalance = initialBuyer.balance.toNumber();
        // Action: Admin rejects (Refunds Buyer)
        const resolvedEscrow = await EscrowService_1.EscrowService.resolveDispute(ADMIN_ID, activeEscrow.id, 'REJECT');
        const finalBuyer = await getUser(BUYER_ID);
        // Verification
        expect(resolvedEscrow.status).toBe(client_1.EscrowStatus.REFUNDED);
        // Check if buyer was refunded atomically
        expect(finalBuyer.balance.toNumber()).toBe(initialBuyerBalance + lockAmount);
    });
    // Test 4: Prevent Double-Release
    it('should prevent double-release and throw an error', async () => {
        const lockAmount = 10;
        // Setup: Create a new escrow
        await EscrowService_1.EscrowService.createEscrow(BUYER_ID, SELLER_ID, lockAmount, 'Test double-release setup');
        const activeEscrow = await prisma_1.default.escrow.findFirstOrThrow({
            where: { buyerId: BUYER_ID, status: client_1.EscrowStatus.HOLD },
            orderBy: { createdAt: 'desc' }
        });
        // 1st Release (Success)
        await EscrowService_1.EscrowService.releaseEscrow(activeEscrow.id, BUYER_ID);
        // 2nd Release (Should fail)
        await expect(EscrowService_1.EscrowService.releaseEscrow(activeEscrow.id, BUYER_ID)).rejects.toThrow(/Escrow is not in HOLD status/);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHRlc3RzXFxlc2Nyb3cudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQU9BLHFFQUFrRSxDQUFDLGdDQUFnQztBQUNuRywrREFBdUM7QUFDdkMsMkNBQThDO0FBRTlDLGtDQUFrQztBQUNsQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFDOUIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQ2hDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQztBQUU5QixRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO0lBRTdDLGdDQUFnQztJQUNoQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFakYsa0ZBQWtGO0lBQ2xGLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNqQiw2REFBNkQ7UUFDN0QsaUVBQWlFO1FBQ2pFLG1EQUFtRDtJQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNoQixNQUFNLGdCQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxxREFBcUQ7SUFDckQsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2xGLE1BQU0sWUFBWSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUN2QixNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXZELE1BQU0sTUFBTSxHQUFHLE1BQU0sNkJBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFF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LCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRG93bmxvYWRzXFxFc2Nyb3cgTVZQXFx0ZXN0c1xcZXNjcm93LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGVzdHMvZXNjcm93LnRlc3QudHNcclxuLy8gTWluaW1hbCBnbG9iYWxzIHRvIHNhdGlzZnkgVHlwZVNjcmlwdCB3aXRob3V0IGluc3RhbGxpbmcgSmVzdCB0eXBlcyBpbiB0aGlzIE1WUFxyXG5kZWNsYXJlIGNvbnN0IGRlc2NyaWJlOiBhbnk7XHJcbmRlY2xhcmUgY29uc3QgaXQ6IGFueTtcclxuZGVjbGFyZSBjb25zdCBleHBlY3Q6IGFueTtcclxuZGVjbGFyZSBjb25zdCBiZWZvcmVBbGw6IGFueTtcclxuZGVjbGFyZSBjb25zdCBhZnRlckFsbDogYW55O1xyXG5pbXBvcnQgeyBFc2Nyb3dTZXJ2aWNlIH0gZnJvbSAnLi4vc3JjL2xpYi9zZXJ2aWNlcy9Fc2Nyb3dTZXJ2aWNlJzsgLy8gSW1wb3J0IHRoZSBjb3JlIHNlcnZpY2UgbG9naWNcclxuaW1wb3J0IHByaXNtYSBmcm9tICcuLi9zcmMvbGliL3ByaXNtYSc7XHJcbmltcG9ydCB7IEVzY3Jvd1N0YXR1cyB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcclxuXHJcbi8vIEhlbHBlciBJRHMgZnJvbSB0aGUgc2VlZCBzY3JpcHRcclxuY29uc3QgQlVZRVJfSUQgPSAnYnV5ZXItdXVpZCc7XHJcbmNvbnN0IFNFTExFUl9JRCA9ICdzZWxsZXItdXVpZCc7XHJcbmNvbnN0IEFETUlOX0lEID0gJ2FkbWluLXV1aWQnO1xyXG5cclxuZGVzY3JpYmUoJ0VzY3JvdyBDcml0aWNhbCBGaW5hbmNpYWwgRmxvd3MnLCAoKSA9PiB7XHJcblxyXG4gICAgLy8gSGVscGVyIHRvIGdldCBmcmVzaCB1c2VyIGRhdGFcclxuICAgIGNvbnN0IGdldFVzZXIgPSAoaWQ6IHN0cmluZykgPT4gcHJpc21hLnVzZXIuZmluZFVuaXF1ZU9yVGhyb3coeyB3aGVyZTogeyBpZCB9IH0pO1xyXG5cclxuICAgIC8vIEVuc3VyZSB0aGUgZGF0YWJhc2UgaXMgY2xlYW4gYmVmb3JlIHJ1bm5pbmcgdGVzdHMgKG9wdGlvbmFsLCBidXQgZ29vZCBwcmFjdGljZSlcclxuICAgIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgLy8gUnVuIHNlZWQgb3IgZW5zdXJlIHRlc3QgYWNjb3VudHMgZXhpc3Qgd2l0aCBrbm93biBiYWxhbmNlc1xyXG4gICAgICAgIC8vIEZvciBzaW1wbGljaXR5LCB3ZSBhc3N1bWUgc2VlZCBoYXMgcnVuIGFuZCBiYWxhbmNlcyBhcmUga25vd246XHJcbiAgICAgICAgLy8gQnV5ZXI6IDQwMDAgKGFmdGVyIGluaXRpYWwgMTAwMCBsb2NrKSwgU2VsbGVyOiAwXHJcbiAgICB9KTtcclxuXHJcbiAgICBhZnRlckFsbChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgcHJpc21hLiRkaXNjb25uZWN0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUZXN0IDE6IFN1Y2Nlc3NmdWwgRXNjcm93IENyZWF0aW9uIChMb2NraW5nIEZ1bmRzKVxyXG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgY3JlYXRlIGFuIGVzY3JvdyBhbmQgbG9jayBidXllciBmdW5kcyBhdG9taWNhbGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxCdXllciA9IGF3YWl0IGdldFVzZXIoQlVZRVJfSUQpO1xyXG4gICAgICAgIGNvbnN0IGxvY2tBbW91bnQgPSA1MDA7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbEJhbGFuY2UgPSBpbml0aWFsQnV5ZXIuYmFsYW5jZS50b051bWJlcigpO1xyXG5cclxuICAgICAgICBjb25zdCBlc2Nyb3cgPSBhd2FpdCBFc2Nyb3dTZXJ2aWNlLmNyZWF0ZUVzY3JvdyhCVVlFUl9JRCwgU0VMTEVSX0lELCBsb2NrQW1vdW50LCAnVGVzdCBsb2NrJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZmluYWxCdXllciA9IGF3YWl0IGdldFVzZXIoQlVZRVJfSUQpO1xyXG5cclxuICAgICAgICBleHBlY3QoZXNjcm93LnN0YXR1cykudG9CZShFc2Nyb3dTdGF0dXMuSE9MRCk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgYmFsYW5jZSBkZWR1Y3Rpb24gd2FzIGF0b21pY1xyXG4gICAgICAgIGV4cGVjdChmaW5hbEJ1eWVyLmJhbGFuY2UudG9OdW1iZXIoKSkudG9CZShpbml0aWFsQmFsYW5jZSAtIGxvY2tBbW91bnQpOyBcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRlc3QgMjogU3VjY2Vzc2Z1bCBFc2Nyb3cgUmVsZWFzZVxyXG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgcmVsZWFzZSBmdW5kcyB0byBzZWxsZXIgYW5kIHVwZGF0ZSBlc2Nyb3cgc3RhdHVzIGF0b21pY2FsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbG9ja0Ftb3VudCA9IDEwMDtcclxuICAgICAgICAvLyBTZXR1cDogQ3JlYXRlIGEgbmV3IGVzY3Jvd1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxCdXllciA9IGF3YWl0IGdldFVzZXIoQlVZRVJfSUQpO1xyXG4gICAgICAgIGF3YWl0IEVzY3Jvd1NlcnZpY2UuY3JlYXRlRXNjcm93KEJVWUVSX0lELCBTRUxMRVJfSUQsIGxvY2tBbW91bnQsICdUZXN0IHJlbGVhc2Ugc2V0dXAnKTsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFNlbGxlciA9IGF3YWl0IGdldFVzZXIoU0VMTEVSX0lEKTtcclxuICAgICAgICBjb25zdCBpbml0aWFsU2VsbGVyQmFsYW5jZSA9IGluaXRpYWxTZWxsZXIuYmFsYW5jZS50b051bWJlcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFjdGlvbjogUmVsZWFzZSB0aGUgZXNjcm93IChOb3RlOiB3ZSBuZWVkIHRoZSBJRCBvZiB0aGUgbGF0ZXN0IGVzY3JvdylcclxuICAgICAgICBjb25zdCBhY3RpdmVFc2Nyb3cgPSBhd2FpdCBwcmlzbWEuZXNjcm93LmZpbmRGaXJzdE9yVGhyb3coeyBcclxuICAgICAgICAgICAgd2hlcmU6IHsgYnV5ZXJJZDogQlVZRVJfSUQsIHN0YXR1czogRXNjcm93U3RhdHVzLkhPTEQgfSwgXHJcbiAgICAgICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVsZWFzZWRFc2Nyb3cgPSBhd2FpdCBFc2Nyb3dTZXJ2aWNlLnJlbGVhc2VFc2Nyb3coYWN0aXZlRXNjcm93LmlkLCBCVVlFUl9JRCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZmluYWxTZWxsZXIgPSBhd2FpdCBnZXRVc2VyKFNFTExFUl9JRCk7XHJcblxyXG4gICAgICAgIC8vIFZlcmlmaWNhdGlvblxyXG4gICAgICAgIGV4cGVjdChyZWxlYXNlZEVzY3Jvdy5zdGF0dXMpLnRvQmUoRXNjcm93U3RhdHVzLlJFTEVBU0VEKTtcclxuICAgICAgICAvLyBDaGVjayBpZiBzZWxsZXIgd2FzIGNyZWRpdGVkIGF0b21pY2FsbHlcclxuICAgICAgICBleHBlY3QoZmluYWxTZWxsZXIuYmFsYW5jZS50b051bWJlcigpKS50b0JlKGluaXRpYWxTZWxsZXJCYWxhbmNlICsgbG9ja0Ftb3VudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUZXN0IDM6IERpc3B1dGUgUmVzb2x1dGlvbiAoUmVmdW5kIEJ1eWVyKVxyXG4gICAgaXQoJ0FkbWluIHJlc29sdmUgZGlzcHV0ZSBSRUpFQ1Qgc2hvdWxkIHJlZnVuZCBmdW5kcyB0byBidXllciBhdG9taWNhbGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGxvY2tBbW91bnQgPSAyMDA7XHJcbiAgICAgICAgLy8gU2V0dXAgMTogQ3JlYXRlIGEgbmV3IGVzY3Jvd1xyXG4gICAgICAgIGF3YWl0IEVzY3Jvd1NlcnZpY2UuY3JlYXRlRXNjcm93KEJVWUVSX0lELCBTRUxMRVJfSUQsIGxvY2tBbW91bnQsICdUZXN0IGRpc3B1dGUgc2V0dXAnKTsgXHJcbiAgICAgICAgY29uc3QgYWN0aXZlRXNjcm93ID0gYXdhaXQgcHJpc21hLmVzY3Jvdy5maW5kRmlyc3RPclRocm93KHsgXHJcbiAgICAgICAgICAgIHdoZXJlOiB7IGJ1eWVySWQ6IEJVWUVSX0lELCBzdGF0dXM6IEVzY3Jvd1N0YXR1cy5IT0xEIH0sIFxyXG4gICAgICAgICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0gXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIDI6IFJhaXNlIGEgZGlzcHV0ZVxyXG4gICAgICAgIGF3YWl0IEVzY3Jvd1NlcnZpY2UucmFpc2VEaXNwdXRlKGFjdGl2ZUVzY3Jvdy5pZCwgQlVZRVJfSUQsICdEaXNwdXRlIGZvciByZWZ1bmQgdGVzdCcpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxCdXllciA9IGF3YWl0IGdldFVzZXIoQlVZRVJfSUQpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxCdXllckJhbGFuY2UgPSBpbml0aWFsQnV5ZXIuYmFsYW5jZS50b051bWJlcigpO1xyXG5cclxuICAgICAgICAvLyBBY3Rpb246IEFkbWluIHJlamVjdHMgKFJlZnVuZHMgQnV5ZXIpXHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRFc2Nyb3cgPSBhd2FpdCBFc2Nyb3dTZXJ2aWNlLnJlc29sdmVEaXNwdXRlKEFETUlOX0lELCBhY3RpdmVFc2Nyb3cuaWQsICdSRUpFQ1QnKTtcclxuXHJcbiAgICAgICAgY29uc3QgZmluYWxCdXllciA9IGF3YWl0IGdldFVzZXIoQlVZRVJfSUQpO1xyXG5cclxuICAgICAgICAvLyBWZXJpZmljYXRpb25cclxuICAgICAgICBleHBlY3QocmVzb2x2ZWRFc2Nyb3cuc3RhdHVzKS50b0JlKEVzY3Jvd1N0YXR1cy5SRUZVTkRFRCk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgYnV5ZXIgd2FzIHJlZnVuZGVkIGF0b21pY2FsbHlcclxuICAgICAgICBleHBlY3QoZmluYWxCdXllci5iYWxhbmNlLnRvTnVtYmVyKCkpLnRvQmUoaW5pdGlhbEJ1eWVyQmFsYW5jZSArIGxvY2tBbW91bnQpOyBcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRlc3QgNDogUHJldmVudCBEb3VibGUtUmVsZWFzZVxyXG4gICAgaXQoJ3Nob3VsZCBwcmV2ZW50IGRvdWJsZS1yZWxlYXNlIGFuZCB0aHJvdyBhbiBlcnJvcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBsb2NrQW1vdW50ID0gMTA7XHJcbiAgICAgICAgLy8gU2V0dXA6IENyZWF0ZSBhIG5ldyBlc2Nyb3dcclxuICAgICAgICBhd2FpdCBFc2Nyb3dTZXJ2aWNlLmNyZWF0ZUVzY3JvdyhCVVlFUl9JRCwgU0VMTEVSX0lELCBsb2NrQW1vdW50LCAnVGVzdCBkb3VibGUtcmVsZWFzZSBzZXR1cCcpOyBcclxuICAgICAgICBjb25zdCBhY3RpdmVFc2Nyb3cgPSBhd2FpdCBwcmlzbWEuZXNjcm93LmZpbmRGaXJzdE9yVGhyb3coeyBcclxuICAgICAgICAgICAgd2hlcmU6IHsgYnV5ZXJJZDogQlVZRVJfSUQsIHN0YXR1czogRXNjcm93U3RhdHVzLkhPTEQgfSwgXHJcbiAgICAgICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gMXN0IFJlbGVhc2UgKFN1Y2Nlc3MpXHJcbiAgICAgICAgYXdhaXQgRXNjcm93U2VydmljZS5yZWxlYXNlRXNjcm93KGFjdGl2ZUVzY3Jvdy5pZCwgQlVZRVJfSUQpO1xyXG5cclxuICAgICAgICAvLyAybmQgUmVsZWFzZSAoU2hvdWxkIGZhaWwpXHJcbiAgICAgICAgYXdhaXQgZXhwZWN0KEVzY3Jvd1NlcnZpY2UucmVsZWFzZUVzY3JvdyhhY3RpdmVFc2Nyb3cuaWQsIEJVWUVSX0lEKSkucmVqZWN0cy50b1Rocm93KC9Fc2Nyb3cgaXMgbm90IGluIEhPTEQgc3RhdHVzLyk7XHJcbiAgICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9