b3bcb7b5a610ed0c30e557c1eda7a417
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
const prisma_1 = __importDefault(require("../../../lib/prisma"));
const auth_1 = require("../../../../src/lib/auth");
async function handler(req, res) {
    try {
        if (req.method === 'GET') {
            const deposits = await prisma_1.default.transaction.findMany({ where: { type: 'DEPOSIT' }, orderBy: { createdAt: 'desc' }, take: 50 });
            return res.json({ deposits });
        }
        if (req.method === 'POST') {
            // require authenticated buyer
            const s = await (0, auth_1.getSessionFromReq)(req);
            if (!s.user)
                return res.status(401).json({ message: 'Unauthorized' });
            if (s.user.role.toLowerCase() !== 'buyer')
                return res.status(403).json({ message: 'Only buyers can create deposits' });
            const { amount, externalRef } = req.body;
            const userId = s.user.id;
            if (!userId || amount == null)
                return res.status(400).json({ message: 'userId and amount required' });
            const num = typeof amount === 'string' ? Number(amount) : amount;
            if (isNaN(num) || num <= 0)
                return res.status(400).json({ message: 'amount must be a positive number' });
            // Ensure user exists
            const u = await prisma_1.default.user.findUnique({ where: { id: userId } });
            if (!u)
                return res.status(400).json({ message: 'user not found' });
            const tx = await prisma_1.default.transaction.create({ data: {
                    userId,
                    type: 'DEPOSIT',
                    status: 'COMPLETED',
                    amount: num,
                    details: { channel: 'MANUAL' },
                    externalRef: externalRef || `DEP-${Date.now()}`
                } });
            return res.status(201).json({ deposit: tx });
        }
        return res.status(405).end();
    }
    catch (e) {
        return res.status(500).json({ message: (e === null || e === void 0 ? void 0 : e.message) || String(e) });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xccGFnZXNcXGFwaVxcZGVwb3NpdHNcXGluZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsMEJBcUNDO0FBeENELGlFQUF5QztBQUN6QyxtREFBNkQ7QUFFOUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxHQUFtQixFQUFFLEdBQW9CO0lBQzdFLElBQUksQ0FBQztRQUNILElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUN6QixNQUFNLFFBQVEsR0FBRyxNQUFNLGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0gsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzFCLDhCQUE4QjtZQUM5QixNQUFNLENBQUMsR0FBRyxNQUFNLElBQUEsd0JBQWlCLEVBQUMsR0FBVSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU87Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxDQUFDLENBQUM7WUFFM0gsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxJQUFJLElBQUk7Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxDQUFDLENBQUM7WUFDdEcsTUFBTSxHQUFHLEdBQUcsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNqRSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLENBQUMsQ0FBQztZQUV6RyxxQkFBcUI7WUFDckIsTUFBTSxDQUFDLEdBQUcsTUFBTSxnQkFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxDQUFDO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sRUFBRSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFO29CQUNqRCxNQUFNO29CQUNOLElBQUksRUFBRSxTQUFTO29CQUNmLE1BQU0sRUFBRSxXQUFXO29CQUNuQixNQUFNLEVBQUUsR0FBRztvQkFDWCxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO29CQUM5QixXQUFXLEVBQUUsV0FBVyxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFO2lCQUNoRCxFQUFDLENBQUMsQ0FBQztZQUNKLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBRUQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQSxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsT0FBTyxLQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xccGFnZXNcXGFwaVxcZGVwb3NpdHNcXGluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcclxuaW1wb3J0IHByaXNtYSBmcm9tICcuLi8uLi8uLi9saWIvcHJpc21hJztcclxuaW1wb3J0IHsgZ2V0U2Vzc2lvbkZyb21SZXEgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcclxuICAgICAgY29uc3QgZGVwb3NpdHMgPSBhd2FpdCBwcmlzbWEudHJhbnNhY3Rpb24uZmluZE1hbnkoeyB3aGVyZTogeyB0eXBlOiAnREVQT1NJVCcgfSwgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9LCB0YWtlOiA1MCB9KTtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKHsgZGVwb3NpdHMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgICAvLyByZXF1aXJlIGF1dGhlbnRpY2F0ZWQgYnV5ZXJcclxuICAgICAgY29uc3QgcyA9IGF3YWl0IGdldFNlc3Npb25Gcm9tUmVxKHJlcSBhcyBhbnkpO1xyXG4gICAgICBpZiAoIXMudXNlcikgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ1VuYXV0aG9yaXplZCcgfSk7XHJcbiAgICAgIGlmIChzLnVzZXIucm9sZS50b0xvd2VyQ2FzZSgpICE9PSAnYnV5ZXInKSByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnT25seSBidXllcnMgY2FuIGNyZWF0ZSBkZXBvc2l0cycgfSk7XHJcblxyXG4gIGNvbnN0IHsgYW1vdW50LCBleHRlcm5hbFJlZiB9ID0gcmVxLmJvZHk7XHJcbiAgY29uc3QgdXNlcklkID0gcy51c2VyLmlkO1xyXG4gIGlmICghdXNlcklkIHx8IGFtb3VudCA9PSBudWxsKSByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAndXNlcklkIGFuZCBhbW91bnQgcmVxdWlyZWQnIH0pO1xyXG4gIGNvbnN0IG51bSA9IHR5cGVvZiBhbW91bnQgPT09ICdzdHJpbmcnID8gTnVtYmVyKGFtb3VudCkgOiBhbW91bnQ7XHJcbiAgaWYgKGlzTmFOKG51bSkgfHwgbnVtIDw9IDApIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdhbW91bnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicgfSk7XHJcblxyXG4gIC8vIEVuc3VyZSB1c2VyIGV4aXN0c1xyXG4gIGNvbnN0IHUgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHsgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9IH0pO1xyXG4gIGlmICghdSkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ3VzZXIgbm90IGZvdW5kJyB9KTtcclxuICAgICAgY29uc3QgdHggPSBhd2FpdCBwcmlzbWEudHJhbnNhY3Rpb24uY3JlYXRlKHsgZGF0YToge1xyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICB0eXBlOiAnREVQT1NJVCcsXHJcbiAgICAgICAgc3RhdHVzOiAnQ09NUExFVEVEJyxcclxuICAgICAgICBhbW91bnQ6IG51bSxcclxuICAgICAgICBkZXRhaWxzOiB7IGNoYW5uZWw6ICdNQU5VQUwnIH0sXHJcbiAgICAgICAgZXh0ZXJuYWxSZWY6IGV4dGVybmFsUmVmIHx8IGBERVAtJHtEYXRlLm5vdygpfWBcclxuICAgICAgfX0pO1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBkZXBvc2l0OiB0eCB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmVuZCgpO1xyXG4gIH0gY2F0Y2ggKGU6IGFueSkge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==