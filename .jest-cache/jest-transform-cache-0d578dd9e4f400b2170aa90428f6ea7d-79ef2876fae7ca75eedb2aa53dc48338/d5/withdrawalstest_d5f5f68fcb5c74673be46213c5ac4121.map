{"file":"C:\\Users\\USER\\Downloads\\Escrow MVP\\tests\\api\\withdrawals.test.ts","mappings":";;;;;AAAA,qDAA8C;AAC9C,kFAA4D;AAC5D,mDAAoD;AACpD,kEAA0C;AAE1C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,YAAY,CAAC;AAE1D,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAA,6BAAW,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5E,MAAM,IAAA,eAAO,EAAC,GAAU,EAAE,GAAU,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC9D,yBAAyB;QACzB,IAAI,MAAM,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAS,EAAE,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,EAAS,EAAE,CAAC,CAAC;QACxH,CAAC;QACD,MAAM,OAAO,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;QACvE,MAAM,MAAM,GAAG,MAAM,IAAA,qBAAW,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAClD,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAA,6BAAW,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,WAAW,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QACtH,MAAM,IAAA,eAAO,EAAC,GAAU,EAAE,GAAU,CAAC,CAAC;QACtC,MAAM,CAAC,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\USER\\Downloads\\Escrow MVP\\tests\\api\\withdrawals.test.ts"],"sourcesContent":["import { createMocks } from 'node-mocks-http';\r\nimport handler from '../../src/pages/api/withdrawals/index';\r\nimport { signSession } from '../../src/lib/session';\r\nimport prisma from '../../src/lib/prisma';\r\n\r\nconst SECRET = process.env.SESSION_SECRET || 'dev-secret';\r\n\r\ndescribe('POST /api/withdrawals', () => {\r\n  test('returns 401 when no session cookie', async () => {\r\n    const { req, res } = createMocks({ method: 'POST', body: { amount: 100 } });\r\n    await handler(req as any, res as any);\r\n    expect(res._getStatusCode()).toBe(401);\r\n  });\r\n\r\n  test('creates withdrawal when authenticated seller', async () => {\r\n    // ensure a seller exists\r\n    let seller = await prisma.user.findFirst({ where: { role: 'SELLER' } as any });\r\n    if (!seller) {\r\n      seller = await prisma.user.create({ data: { email: 'test-seller@local', role: 'SELLER', passwordHash: 'x' } as any });\r\n    }\r\n    const payload = { id: seller.id, email: seller.email, role: 'seller' };\r\n    const cookie = await signSession(payload, SECRET);\r\n    const { req, res } = createMocks({ method: 'POST', body: { amount: 123 }, headers: { cookie: `session=${cookie}` } });\r\n    await handler(req as any, res as any);\r\n    expect([200,201]).toContain(res._getStatusCode());\r\n  });\r\n});\r\n"],"version":3}