1976c5c3b957ad3746c96263b305b76a
"use strict";
// src/lib/session.ts
// Small, runtime-compatible helpers to sign and verify a session cookie.
// This module intentionally does not import Prisma or other server-only libs so it
// can be used from middleware (Edge) and server routes.
Object.defineProperty(exports, "__esModule", { value: true });
exports.signSession = signSession;
exports.verifySession = verifySession;
const toHex = (buf) => Array.from(buf).map(b => b.toString(16).padStart(2, '0')).join('');
async function hmacSha256Hex(message, secret) {
    // Try Node's crypto first
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { createHmac } = require('crypto');
        return createHmac('sha256', secret).update(message).digest('hex');
    }
    catch (e) {
        // Fallback to Web Crypto (Edge runtime)
        const enc = new TextEncoder();
        const key = await globalThis.crypto.subtle.importKey('raw', enc.encode(secret), { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);
        const sig = await globalThis.crypto.subtle.sign('HMAC', key, enc.encode(message));
        return toHex(new Uint8Array(sig));
    }
}
async function signSession(payload, secret) {
    if (!secret) {
        if (process.env.NODE_ENV === 'production') {
            throw new Error('SESSION_SECRET must be set in production');
        }
        console.warn('SESSION_SECRET not provided; using insecure fallback. Set SESSION_SECRET in env for production.');
        secret = 'dev-secret';
    }
    const str = JSON.stringify(payload);
    const encoded = encodeURIComponent(str);
    const sig = await hmacSha256Hex(encoded, secret);
    return `${encoded}.${sig}`;
}
async function verifySession(cookieValue, secret) {
    if (!cookieValue)
        return null;
    if (!secret) {
        if (process.env.NODE_ENV === 'production') {
            // Fail to verify in production without a secret
            return null;
        }
        // Insecure fallback for development/tests
        secret = 'dev-secret';
    }
    const parts = cookieValue.split('.');
    if (parts.length !== 2)
        return null;
    const [encoded, sig] = parts;
    const expected = await hmacSha256Hex(encoded, secret);
    // Timing-safe compare
    try {
        // Node crypto timingSafeEqual
        // Convert hex strings to buffers
        const bufExpected = Buffer.from(expected, 'hex');
        const bufSig = Buffer.from(sig, 'hex');
        if (bufExpected.length !== bufSig.length)
            return null;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { timingSafeEqual } = require('crypto');
        if (!timingSafeEqual(bufExpected, bufSig))
            return null;
    }
    catch (e) {
        // Fallback: constant-time string compare
        let mismatch = 0;
        if (expected.length !== sig.length)
            return null;
        for (let i = 0; i < expected.length; i++) {
            mismatch |= expected.charCodeAt(i) ^ sig.charCodeAt(i);
        }
        if (mismatch !== 0)
            return null;
    }
    // debug: verification succeeded
    // console.debug(`verifySession: ok expected=${expected.slice(0,8)} got=${sig.slice(0,8)}`);
    try {
        const parsed = JSON.parse(decodeURIComponent(encoded));
        return parsed;
    }
    catch (e) {
        return null;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xcbGliXFxzZXNzaW9uLnRzIiwibWFwcGluZ3MiOiI7QUFBQSxxQkFBcUI7QUFDckIseUVBQXlFO0FBQ3pFLG1GQUFtRjtBQUNuRix3REFBd0Q7O0FBeUJ4RCxrQ0FZQztBQUVELHNDQXlDQztBQTlFRCxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFdEcsS0FBSyxVQUFVLGFBQWEsQ0FBQyxPQUFlLEVBQUUsTUFBYztJQUMxRCwwQkFBMEI7SUFDMUIsSUFBSSxDQUFDO1FBQ0gsOERBQThEO1FBQzlELE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCx3Q0FBd0M7UUFDeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxNQUFPLFVBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQzNELEtBQUssRUFDTCxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUNsQixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUNqQyxLQUFLLEVBQ0wsQ0FBQyxNQUFNLENBQUMsQ0FDVCxDQUFDO1FBQ0YsTUFBTSxHQUFHLEdBQUcsTUFBTyxVQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE9BQU8sS0FBSyxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztBQUNILENBQUM7QUFFTSxLQUFLLFVBQVUsV0FBVyxDQUFDLE9BQWUsRUFBRSxNQUFjO0lBQy9ELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxFQUFFLENBQUM7WUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLGlHQUFpRyxDQUFDLENBQUM7UUFDaEgsTUFBTSxHQUFHLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxNQUFNLEdBQUcsR0FBRyxNQUFNLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakQsT0FBTyxHQUFHLE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBRU0sS0FBSyxVQUFVLGFBQWEsQ0FBQyxXQUFtQixFQUFFLE1BQWM7SUFDckUsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPLElBQUksQ0FBQztJQUM5QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRSxDQUFDO1lBQzFDLGdEQUFnRDtZQUNoRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCwwQ0FBMEM7UUFDMUMsTUFBTSxHQUFHLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3BDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzdCLE1BQU0sUUFBUSxHQUFHLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RCxzQkFBc0I7SUFDdEIsSUFBSSxDQUFDO1FBQ0gsOEJBQThCO1FBQzlCLGlDQUFpQztRQUNqQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUN0RCw4REFBOEQ7UUFDOUQsTUFBTSxFQUFFLGVBQWUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztJQUN6RCxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLHlDQUF5QztRQUN6QyxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDaEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6QyxRQUFRLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFDRCxJQUFJLFFBQVEsS0FBSyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUM7SUFDbEMsQ0FBQztJQUNELGdDQUFnQztJQUNoQyw0RkFBNEY7SUFDNUYsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTRVJcXERvd25sb2Fkc1xcRXNjcm93IE1WUFxcc3JjXFxsaWJcXHNlc3Npb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2xpYi9zZXNzaW9uLnRzXHJcbi8vIFNtYWxsLCBydW50aW1lLWNvbXBhdGlibGUgaGVscGVycyB0byBzaWduIGFuZCB2ZXJpZnkgYSBzZXNzaW9uIGNvb2tpZS5cclxuLy8gVGhpcyBtb2R1bGUgaW50ZW50aW9uYWxseSBkb2VzIG5vdCBpbXBvcnQgUHJpc21hIG9yIG90aGVyIHNlcnZlci1vbmx5IGxpYnMgc28gaXRcclxuLy8gY2FuIGJlIHVzZWQgZnJvbSBtaWRkbGV3YXJlIChFZGdlKSBhbmQgc2VydmVyIHJvdXRlcy5cclxuXHJcbmNvbnN0IHRvSGV4ID0gKGJ1ZjogVWludDhBcnJheSkgPT4gQXJyYXkuZnJvbShidWYpLm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gaG1hY1NoYTI1NkhleChtZXNzYWdlOiBzdHJpbmcsIHNlY3JldDogc3RyaW5nKSB7XHJcbiAgLy8gVHJ5IE5vZGUncyBjcnlwdG8gZmlyc3RcclxuICB0cnkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcclxuICAgIGNvbnN0IHsgY3JlYXRlSG1hYyB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XHJcbiAgICByZXR1cm4gY3JlYXRlSG1hYygnc2hhMjU2Jywgc2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCdoZXgnKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBGYWxsYmFjayB0byBXZWIgQ3J5cHRvIChFZGdlIHJ1bnRpbWUpXHJcbiAgICBjb25zdCBlbmMgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuICAgIGNvbnN0IGtleSA9IGF3YWl0IChnbG9iYWxUaGlzIGFzIGFueSkuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXHJcbiAgICAgICdyYXcnLFxyXG4gICAgICBlbmMuZW5jb2RlKHNlY3JldCksXHJcbiAgICAgIHsgbmFtZTogJ0hNQUMnLCBoYXNoOiAnU0hBLTI1NicgfSxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIFsnc2lnbiddXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc2lnID0gYXdhaXQgKGdsb2JhbFRoaXMgYXMgYW55KS5jcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBrZXksIGVuYy5lbmNvZGUobWVzc2FnZSkpO1xyXG4gICAgcmV0dXJuIHRvSGV4KG5ldyBVaW50OEFycmF5KHNpZykpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25TZXNzaW9uKHBheWxvYWQ6IG9iamVjdCwgc2VjcmV0OiBzdHJpbmcpIHtcclxuICBpZiAoIXNlY3JldCkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTRVNTSU9OX1NFQ1JFVCBtdXN0IGJlIHNldCBpbiBwcm9kdWN0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLndhcm4oJ1NFU1NJT05fU0VDUkVUIG5vdCBwcm92aWRlZDsgdXNpbmcgaW5zZWN1cmUgZmFsbGJhY2suIFNldCBTRVNTSU9OX1NFQ1JFVCBpbiBlbnYgZm9yIHByb2R1Y3Rpb24uJyk7XHJcbiAgICBzZWNyZXQgPSAnZGV2LXNlY3JldCc7XHJcbiAgfVxyXG4gIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpO1xyXG4gIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyKTtcclxuICBjb25zdCBzaWcgPSBhd2FpdCBobWFjU2hhMjU2SGV4KGVuY29kZWQsIHNlY3JldCk7XHJcbiAgcmV0dXJuIGAke2VuY29kZWR9LiR7c2lnfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlTZXNzaW9uKGNvb2tpZVZhbHVlOiBzdHJpbmcsIHNlY3JldDogc3RyaW5nKSB7XHJcbiAgaWYgKCFjb29raWVWYWx1ZSkgcmV0dXJuIG51bGw7XHJcbiAgaWYgKCFzZWNyZXQpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgIC8vIEZhaWwgdG8gdmVyaWZ5IGluIHByb2R1Y3Rpb24gd2l0aG91dCBhIHNlY3JldFxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIEluc2VjdXJlIGZhbGxiYWNrIGZvciBkZXZlbG9wbWVudC90ZXN0c1xyXG4gICAgc2VjcmV0ID0gJ2Rldi1zZWNyZXQnO1xyXG4gIH1cclxuICBjb25zdCBwYXJ0cyA9IGNvb2tpZVZhbHVlLnNwbGl0KCcuJyk7XHJcbiAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMikgcmV0dXJuIG51bGw7XHJcbiAgY29uc3QgW2VuY29kZWQsIHNpZ10gPSBwYXJ0cztcclxuICBjb25zdCBleHBlY3RlZCA9IGF3YWl0IGhtYWNTaGEyNTZIZXgoZW5jb2RlZCwgc2VjcmV0KTtcclxuICAvLyBUaW1pbmctc2FmZSBjb21wYXJlXHJcbiAgdHJ5IHtcclxuICAgIC8vIE5vZGUgY3J5cHRvIHRpbWluZ1NhZmVFcXVhbFxyXG4gICAgLy8gQ29udmVydCBoZXggc3RyaW5ncyB0byBidWZmZXJzXHJcbiAgICBjb25zdCBidWZFeHBlY3RlZCA9IEJ1ZmZlci5mcm9tKGV4cGVjdGVkLCAnaGV4Jyk7XHJcbiAgICBjb25zdCBidWZTaWcgPSBCdWZmZXIuZnJvbShzaWcsICdoZXgnKTtcclxuICAgIGlmIChidWZFeHBlY3RlZC5sZW5ndGggIT09IGJ1ZlNpZy5sZW5ndGgpIHJldHVybiBudWxsO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcclxuICAgIGNvbnN0IHsgdGltaW5nU2FmZUVxdWFsIH0gPSByZXF1aXJlKCdjcnlwdG8nKTtcclxuICAgIGlmICghdGltaW5nU2FmZUVxdWFsKGJ1ZkV4cGVjdGVkLCBidWZTaWcpKSByZXR1cm4gbnVsbDtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBGYWxsYmFjazogY29uc3RhbnQtdGltZSBzdHJpbmcgY29tcGFyZVxyXG4gICAgbGV0IG1pc21hdGNoID0gMDtcclxuICAgIGlmIChleHBlY3RlZC5sZW5ndGggIT09IHNpZy5sZW5ndGgpIHJldHVybiBudWxsO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHBlY3RlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBtaXNtYXRjaCB8PSBleHBlY3RlZC5jaGFyQ29kZUF0KGkpIF4gc2lnLmNoYXJDb2RlQXQoaSk7XHJcbiAgICB9XHJcbiAgICBpZiAobWlzbWF0Y2ggIT09IDApIHJldHVybiBudWxsO1xyXG4gIH1cclxuICAvLyBkZWJ1ZzogdmVyaWZpY2F0aW9uIHN1Y2NlZWRlZFxyXG4gIC8vIGNvbnNvbGUuZGVidWcoYHZlcmlmeVNlc3Npb246IG9rIGV4cGVjdGVkPSR7ZXhwZWN0ZWQuc2xpY2UoMCw4KX0gZ290PSR7c2lnLnNsaWNlKDAsOCl9YCk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWQpKTtcclxuICAgIHJldHVybiBwYXJzZWQ7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==