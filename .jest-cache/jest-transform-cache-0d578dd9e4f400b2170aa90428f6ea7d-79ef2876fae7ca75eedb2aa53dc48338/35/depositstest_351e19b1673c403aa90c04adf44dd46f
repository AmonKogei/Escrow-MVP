ea112f5c5725de77044a6d22c64360a1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_mocks_http_1 = require("node-mocks-http");
const index_1 = __importDefault(require("../../src/pages/api/deposits/index"));
const session_1 = require("../../src/lib/session");
const prisma_1 = __importDefault(require("../../src/lib/prisma"));
const SECRET = process.env.SESSION_SECRET || 'dev-secret';
describe('POST /api/deposits', () => {
    test('returns 401 when no session cookie', async () => {
        const { req, res } = (0, node_mocks_http_1.createMocks)({ method: 'POST', body: { amount: 100 } });
        await (0, index_1.default)(req, res);
        expect(res._getStatusCode()).toBe(401);
    });
    test('creates deposit when authenticated buyer', async () => {
        // ensure a buyer exists
        let buyer = await prisma_1.default.user.findFirst({ where: { role: 'buyer' } });
        if (!buyer) {
            buyer = await prisma_1.default.user.create({ data: { email: 'test-buyer@local', role: 'buyer', passwordHash: 'x' } });
        }
        const payload = { id: buyer.id, email: buyer.email, role: 'buyer' };
        const cookie = await (0, session_1.signSession)(payload, SECRET);
        const { req, res } = (0, node_mocks_http_1.createMocks)({ method: 'POST', body: { amount: 123 }, headers: { cookie: `session=${cookie}` } });
        await (0, index_1.default)(req, res);
        expect([200, 201]).toContain(res._getStatusCode());
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHRlc3RzXFxhcGlcXGRlcG9zaXRzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBOEM7QUFDOUMsK0VBQXlEO0FBQ3pELG1EQUFvRDtBQUNwRCxrRUFBMEM7QUFFMUMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksWUFBWSxDQUFDO0FBRTFELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BELE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBQSw2QkFBVyxFQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBVSxFQUFFLEdBQVUsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUQsd0JBQXdCO1FBQ3hCLElBQUksS0FBSyxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDWCxLQUFLLEdBQUcsTUFBTSxnQkFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3JILENBQUM7UUFDRCxNQUFNLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUNwRSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEscUJBQVcsRUFBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFBLDZCQUFXLEVBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0SCxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQVUsRUFBRSxHQUFVLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTRVJcXERvd25sb2Fkc1xcRXNjcm93IE1WUFxcdGVzdHNcXGFwaVxcZGVwb3NpdHMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVNb2NrcyB9IGZyb20gJ25vZGUtbW9ja3MtaHR0cCc7XHJcbmltcG9ydCBoYW5kbGVyIGZyb20gJy4uLy4uL3NyYy9wYWdlcy9hcGkvZGVwb3NpdHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBzaWduU2Vzc2lvbiB9IGZyb20gJy4uLy4uL3NyYy9saWIvc2Vzc2lvbic7XHJcbmltcG9ydCBwcmlzbWEgZnJvbSAnLi4vLi4vc3JjL2xpYi9wcmlzbWEnO1xyXG5cclxuY29uc3QgU0VDUkVUID0gcHJvY2Vzcy5lbnYuU0VTU0lPTl9TRUNSRVQgfHwgJ2Rldi1zZWNyZXQnO1xyXG5cclxuZGVzY3JpYmUoJ1BPU1QgL2FwaS9kZXBvc2l0cycsICgpID0+IHtcclxuICB0ZXN0KCdyZXR1cm5zIDQwMSB3aGVuIG5vIHNlc3Npb24gY29va2llJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY3JlYXRlTW9ja3MoeyBtZXRob2Q6ICdQT1NUJywgYm9keTogeyBhbW91bnQ6IDEwMCB9IH0pO1xyXG4gICAgYXdhaXQgaGFuZGxlcihyZXEgYXMgYW55LCByZXMgYXMgYW55KTtcclxuICAgIGV4cGVjdChyZXMuX2dldFN0YXR1c0NvZGUoKSkudG9CZSg0MDEpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdjcmVhdGVzIGRlcG9zaXQgd2hlbiBhdXRoZW50aWNhdGVkIGJ1eWVyJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gZW5zdXJlIGEgYnV5ZXIgZXhpc3RzXHJcbiAgICBsZXQgYnV5ZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kRmlyc3QoeyB3aGVyZTogeyByb2xlOiAnYnV5ZXInIH0gfSk7XHJcbiAgICBpZiAoIWJ1eWVyKSB7XHJcbiAgICAgIGJ1eWVyID0gYXdhaXQgcHJpc21hLnVzZXIuY3JlYXRlKHsgZGF0YTogeyBlbWFpbDogJ3Rlc3QtYnV5ZXJAbG9jYWwnLCByb2xlOiAnYnV5ZXInLCBwYXNzd29yZEhhc2g6ICd4JyB9IGFzIGFueSB9KTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBheWxvYWQgPSB7IGlkOiBidXllci5pZCwgZW1haWw6IGJ1eWVyLmVtYWlsLCByb2xlOiAnYnV5ZXInIH07XHJcbiAgICBjb25zdCBjb29raWUgPSBhd2FpdCBzaWduU2Vzc2lvbihwYXlsb2FkLCBTRUNSRVQpO1xyXG4gICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY3JlYXRlTW9ja3MoeyBtZXRob2Q6ICdQT1NUJywgYm9keTogeyBhbW91bnQ6IDEyMyB9LCBoZWFkZXJzOiB7IGNvb2tpZTogYHNlc3Npb249JHtjb29raWV9YCB9IH0pO1xyXG4gICAgYXdhaXQgaGFuZGxlcihyZXEgYXMgYW55LCByZXMgYXMgYW55KTtcclxuICAgIGV4cGVjdChbMjAwLDIwMV0pLnRvQ29udGFpbihyZXMuX2dldFN0YXR1c0NvZGUoKSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=