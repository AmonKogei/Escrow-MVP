377351914b3cf4ef90b2bcb1ae7601f7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSessionFromReq = getSessionFromReq;
const headers_1 = require("next/headers");
const session_1 = require("./session");
async function getSessionFromReq(req) {
    var _a, _b;
    try {
        // read cookie header
        let cookieHeader = '';
        if (req && 'headers' in req && req.headers) {
            const get = (_b = (_a = req.headers.get) === null || _a === void 0 ? void 0 : _a.bind(req.headers)) !== null && _b !== void 0 ? _b : undefined;
            if (get)
                cookieHeader = get('cookie') || '';
            else
                cookieHeader = req.headers.cookie || '';
        }
        else {
            // next server-side helper
            cookieHeader = (0, headers_1.cookies)().toString();
        }
        const cookieMap = {};
        cookieHeader.split(';').map(s => s.trim()).filter(Boolean).forEach(c => {
            const [k, ...rest] = c.split('=');
            cookieMap[k] = rest.join('=');
        });
        const raw = cookieMap['session'] || cookieMap['escrow_user'];
        if (!raw) {
            // debug: no session cookie present
            // console.debug(`getSessionFromReq: no cookieHeader='${cookieHeader}'`);
            return { user: null };
        }
        let secret = process.env.SESSION_SECRET || '';
        if (!secret && process.env.NODE_ENV !== 'production') {
            secret = 'dev-secret';
        }
        const parsed = await (0, session_1.verifySession)(raw, secret);
        if (!parsed) {
            // debug: failed to verify
            console.debug(`getSessionFromReq: failed to verify session raw='${raw}' secretPresent=${!!process.env.SESSION_SECRET}`);
            return { user: null };
        }
        const user = { id: parsed.id, email: parsed.email, role: (parsed.role || 'buyer') };
        console.debug(`getSessionFromReq: parsed user=${JSON.stringify(user)}`);
        return { user };
    }
    catch (e) {
        return { user: null };
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xcbGliXFxhdXRoLnRzIiwibWFwcGluZ3MiOiI7O0FBSUEsOENBeUNDO0FBN0NELDBDQUF1QztBQUN2Qyx1Q0FBMEM7QUFHbkMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLEdBQStEOztJQUNyRyxJQUFJLENBQUM7UUFDSCxxQkFBcUI7UUFDckIsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksR0FBRyxJQUFJLFNBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNDLE1BQU0sR0FBRyxHQUFHLE1BQUEsTUFBQyxHQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsMENBQUUsSUFBSSxDQUFFLEdBQVcsQ0FBQyxPQUFPLENBQUMsbUNBQUksU0FBUyxDQUFDO1lBQzlFLElBQUksR0FBRztnQkFBRSxZQUFZLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7Z0JBQ3ZDLFlBQVksR0FBSSxHQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDeEQsQ0FBQzthQUFNLENBQUM7WUFDTiwwQkFBMEI7WUFDMUIsWUFBWSxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RDLENBQUM7UUFFRCxNQUFNLFNBQVMsR0FBMEIsRUFBRSxDQUFDO1FBQzVDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1QsbUNBQW1DO1lBQ25DLHlFQUF5RTtZQUN6RSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFDSCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEVBQUUsQ0FBQztZQUNyRCxNQUFNLEdBQUcsWUFBWSxDQUFDO1FBQ3hCLENBQUM7UUFDRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsdUJBQWEsRUFBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ1osMEJBQTBCO1lBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDeEgsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN4QixDQUFDO1FBQ0QsTUFBTSxJQUFJLEdBQWdCLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsRUFBUyxDQUFDO1FBQ3hHLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU0VSXFxEb3dubG9hZHNcXEVzY3JvdyBNVlBcXHNyY1xcbGliXFxhdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvb2tpZXMgfSBmcm9tICduZXh0L2hlYWRlcnMnO1xyXG5pbXBvcnQgeyB2ZXJpZnlTZXNzaW9uIH0gZnJvbSAnLi9zZXNzaW9uJztcclxuaW1wb3J0IHR5cGUgeyBTZXNzaW9uLCBTZXNzaW9uVXNlciwgVXNlclJvbGUgfSBmcm9tICcuLi90eXBlcy9zZXNzaW9uJztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXNzaW9uRnJvbVJlcShyZXE6IFJlcXVlc3QgfCB7IGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0gfCB1bmRlZmluZWQpIDogUHJvbWlzZTxTZXNzaW9uPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIHJlYWQgY29va2llIGhlYWRlclxyXG4gICAgbGV0IGNvb2tpZUhlYWRlciA9ICcnO1xyXG4gICAgaWYgKHJlcSAmJiAnaGVhZGVycycgaW4gcmVxICYmIHJlcS5oZWFkZXJzKSB7XHJcbiAgICAgIGNvbnN0IGdldCA9IChyZXEgYXMgYW55KS5oZWFkZXJzLmdldD8uYmluZCgocmVxIGFzIGFueSkuaGVhZGVycykgPz8gdW5kZWZpbmVkO1xyXG4gICAgICBpZiAoZ2V0KSBjb29raWVIZWFkZXIgPSBnZXQoJ2Nvb2tpZScpIHx8ICcnO1xyXG4gICAgICBlbHNlIGNvb2tpZUhlYWRlciA9IChyZXEgYXMgYW55KS5oZWFkZXJzLmNvb2tpZSB8fCAnJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIG5leHQgc2VydmVyLXNpZGUgaGVscGVyXHJcbiAgICAgIGNvb2tpZUhlYWRlciA9IGNvb2tpZXMoKS50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvb2tpZU1hcDogUmVjb3JkPHN0cmluZyxzdHJpbmc+ID0ge307XHJcbiAgICBjb29raWVIZWFkZXIuc3BsaXQoJzsnKS5tYXAocyA9PiBzLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goYyA9PiB7XHJcbiAgICAgIGNvbnN0IFtrLCAuLi5yZXN0XSA9IGMuc3BsaXQoJz0nKTtcclxuICAgICAgY29va2llTWFwW2tdID0gcmVzdC5qb2luKCc9Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByYXcgPSBjb29raWVNYXBbJ3Nlc3Npb24nXSB8fCBjb29raWVNYXBbJ2VzY3Jvd191c2VyJ107XHJcbiAgICAgIGlmICghcmF3KSB7XHJcbiAgICAgICAgLy8gZGVidWc6IG5vIHNlc3Npb24gY29va2llIHByZXNlbnRcclxuICAgICAgICAvLyBjb25zb2xlLmRlYnVnKGBnZXRTZXNzaW9uRnJvbVJlcTogbm8gY29va2llSGVhZGVyPScke2Nvb2tpZUhlYWRlcn0nYCk7XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlcjogbnVsbCB9O1xyXG4gICAgICB9XHJcbiAgICBsZXQgc2VjcmV0ID0gcHJvY2Vzcy5lbnYuU0VTU0lPTl9TRUNSRVQgfHwgJyc7XHJcbiAgICBpZiAoIXNlY3JldCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgIHNlY3JldCA9ICdkZXYtc2VjcmV0JztcclxuICAgIH1cclxuICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHZlcmlmeVNlc3Npb24ocmF3LCBzZWNyZXQpO1xyXG4gICAgICBpZiAoIXBhcnNlZCkge1xyXG4gICAgICAgIC8vIGRlYnVnOiBmYWlsZWQgdG8gdmVyaWZ5XHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgZ2V0U2Vzc2lvbkZyb21SZXE6IGZhaWxlZCB0byB2ZXJpZnkgc2Vzc2lvbiByYXc9JyR7cmF3fScgc2VjcmV0UHJlc2VudD0keyEhcHJvY2Vzcy5lbnYuU0VTU0lPTl9TRUNSRVR9YCk7XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlcjogbnVsbCB9O1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHVzZXI6IFNlc3Npb25Vc2VyID0geyBpZDogcGFyc2VkLmlkLCBlbWFpbDogcGFyc2VkLmVtYWlsLCByb2xlOiAocGFyc2VkLnJvbGUgfHwgJ2J1eWVyJykgfSBhcyBhbnk7XHJcbiAgICAgIGNvbnNvbGUuZGVidWcoYGdldFNlc3Npb25Gcm9tUmVxOiBwYXJzZWQgdXNlcj0ke0pTT04uc3RyaW5naWZ5KHVzZXIpfWApO1xyXG4gICAgcmV0dXJuIHsgdXNlciB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB7IHVzZXI6IG51bGwgfTtcclxuICB9XHJcbn1cclxuXHJcbiJdLCJ2ZXJzaW9uIjozfQ==