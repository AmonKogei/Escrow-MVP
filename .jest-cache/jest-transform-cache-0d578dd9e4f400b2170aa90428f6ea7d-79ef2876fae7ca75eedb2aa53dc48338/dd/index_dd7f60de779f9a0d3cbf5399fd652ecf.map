{"file":"C:\\Users\\USER\\Downloads\\Escrow MVP\\src\\pages\\api\\withdrawals\\index.ts","mappings":";;;;;AAIA,0BAkCC;AArCD,iEAAyC;AACzC,mDAA6D;AAE9C,KAAK,UAAU,OAAO,CAAC,GAAmB,EAAE,GAAoB;IAC7E,IAAI,CAAC;QACH,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,EAAE,CAAC;YACzB,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;YACnI,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;YAC1B,MAAM,CAAC,GAAG,MAAM,IAAA,wBAAiB,EAAC,GAAU,CAAC,CAAC;YAC9C,IAAI,CAAC,CAAC,CAAC,IAAI;gBAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,QAAQ;gBAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sCAAsC,EAAE,CAAC,CAAC;YAE7H,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YACrC,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,IAAI,MAAM,IAAI,IAAI;gBAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAC;YACtG,MAAM,GAAG,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACjE,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;gBAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,kCAAkC,EAAE,CAAC,CAAC;YAEzG,MAAM,CAAC,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,CAAC;gBAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;YAEnE,MAAM,EAAE,GAAG,MAAM,gBAAM,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE;oBACjD,MAAM;oBACN,IAAI,EAAE,YAAY;oBAClB,MAAM,EAAE,SAAS;oBACjB,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,OAAO,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE;oBACxC,WAAW,EAAE,MAAM,IAAI,CAAC,GAAG,EAAE,EAAE;iBAChC,EAAC,CAAC,CAAC;YACJ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IAC/B,CAAC;IAAC,OAAO,CAAM,EAAE,CAAC;QAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,OAAO,KAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACpE,CAAC;AACH,CAAC","names":[],"sources":["C:\\Users\\USER\\Downloads\\Escrow MVP\\src\\pages\\api\\withdrawals\\index.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport prisma from '../../../lib/prisma';\r\nimport { getSessionFromReq } from '../../../../src/lib/auth';\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  try {\r\n    if (req.method === 'GET') {\r\n      const withdrawals = await prisma.transaction.findMany({ where: { type: 'WITHDRAWAL' }, orderBy: { createdAt: 'desc' }, take: 50 });\r\n      return res.json({ withdrawals });\r\n    }\r\n    if (req.method === 'POST') {\r\n      const s = await getSessionFromReq(req as any);\r\n      if (!s.user) return res.status(401).json({ message: 'Unauthorized' });\r\n      if (s.user.role.toLowerCase() !== 'seller') return res.status(403).json({ message: 'Only sellers can request withdrawals' });\r\n\r\n      const { amount, details } = req.body;\r\n      const userId = s.user.id;\r\n      if (!userId || amount == null) return res.status(400).json({ message: 'userId and amount required' });\r\n      const num = typeof amount === 'string' ? Number(amount) : amount;\r\n      if (isNaN(num) || num <= 0) return res.status(400).json({ message: 'amount must be a positive number' });\r\n\r\n      const u = await prisma.user.findUnique({ where: { id: userId } });\r\n      if (!u) return res.status(400).json({ message: 'user not found' });\r\n\r\n      const tx = await prisma.transaction.create({ data: {\r\n        userId,\r\n        type: 'WITHDRAWAL',\r\n        status: 'PENDING',\r\n        amount: num,\r\n        details: details || { method: 'MANUAL' },\r\n        externalRef: `WD-${Date.now()}`\r\n      }});\r\n      return res.status(201).json({ withdrawal: tx });\r\n    }\r\n    return res.status(405).end();\r\n  } catch (e: any) {\r\n    return res.status(500).json({ message: e?.message || String(e) });\r\n  }\r\n}\r\n"],"version":3}