{"file":"C:\\Users\\USER\\Downloads\\Escrow MVP\\src\\lib\\services\\EscrowService.ts","mappings":"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","names":[],"sources":["C:\\Users\\USER\\Downloads\\Escrow MVP\\src\\lib\\services\\EscrowService.ts"],"sourcesContent":["// src/lib/services/EscrowService.ts\r\nimport { Decimal } from '@prisma/client/runtime/library';\r\nimport prisma from '../prisma';\r\nimport { EscrowStatus, UserRole, TransactionType, TransactionStatus } from '@prisma/client';\r\n\r\n// Helper function to get the current user ID (stub for a real auth implementation)\r\nconst getUserIdFromAuth = (role: UserRole) => {\r\n    // In a real app, this would come from a session/JWT\r\n    // For the seed data:\r\n    if (role === UserRole.BUYER) return 'buyer-uuid';\r\n    if (role === UserRole.SELLER) return 'seller-uuid';\r\n    if (role === UserRole.ADMIN) return 'admin-uuid';\r\n    throw new Error(\"Invalid User Role for stub.\");\r\n};\r\n\r\nexport class EscrowService {\r\n\r\n    /**\r\n     * Buyer creates an escrow and locks funds from their balance.\r\n     * ACID: Uses a transaction to ensure balance deduction and escrow creation are atomic.\r\n     * @param buyerId The ID of the buyer.\r\n     * @param sellerId The ID of the seller.\r\n     * @param amount The amount to lock.\r\n     * @param description A description of the transaction.\r\n     */\r\n    static async createEscrow(buyerId: string, sellerId: string, amount: number, description: string) {\r\n        const amountDecimal = new Decimal(amount);\r\n        \r\n        // Use a DB transaction for ACID compliance\r\n        return prisma.$transaction(async (tx) => {\r\n            // 1. Lock the buyer's row to prevent race conditions on balance\r\n            // NOTE: Prisma client doesn't directly support `SELECT FOR UPDATE` in all versions\r\n            // but the transaction ensures serializable isolation is possible. \r\n            // For true row-level locking, you'd use raw SQL or a dedicated lock manager (Redis).\r\n            // We simulate safety here by performing a check and then update.\r\n            \r\n            const buyer = await tx.user.findUniqueOrThrow({\r\n                where: { id: buyerId }\r\n            });\r\n\r\n            // Safety check: Prevent lock if insufficient funds\r\n            if (buyer.balance.lessThan(amountDecimal)) {\r\n                throw new Error('Insufficient balance to create escrow.');\r\n            }\r\n\r\n            // 2. Deduct funds from Buyer's balance\r\n            const newBuyerBalance = buyer.balance.minus(amountDecimal);\r\n            await tx.user.update({\r\n                where: { id: buyerId },\r\n                data: { balance: newBuyerBalance }\r\n            });\r\n\r\n            // 3. Create the Escrow record (status = HOLD)\r\n            const escrow = await tx.escrow.create({\r\n                data: {\r\n                    buyerId,\r\n                    sellerId,\r\n                    amount: amountDecimal,\r\n                    description,\r\n                    status: EscrowStatus.HOLD,\r\n                }\r\n            });\r\n\r\n            // 4. Create an internal transaction and audit log\r\n            await tx.transaction.create({\r\n                data: {\r\n                    userId: buyerId,\r\n                    type: TransactionType.ESCROW_LOCK,\r\n                    status: TransactionStatus.COMPLETED,\r\n                    amount: amountDecimal.negated(), // Negative for deduction\r\n                    details: { escrowId: escrow.id },\r\n                    escrowId: escrow.id,\r\n                }\r\n            });\r\n            await logAudit(tx, buyerId, 'ESCROW_CREATED', escrow.id, { oldBalance: buyer.balance, newBalance: newBuyerBalance });\r\n            \r\n            return escrow;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Buyer releases funds to the Seller.\r\n     * ACID: Uses a transaction and status checks to prevent double-release.\r\n     * @param escrowId The ID of the escrow to release.\r\n     * @param buyerId The ID of the user requesting the release (must be the buyer).\r\n     */\r\n    static async releaseEscrow(escrowId: string, buyerId: string) {\r\n        \r\n        return prisma.$transaction(async (tx) => {\r\n            // 1. Check and lock the Escrow row\r\n            const escrow = await tx.escrow.findUniqueOrThrow({\r\n                where: { id: escrowId },\r\n                select: { id: true, status: true, buyerId: true, sellerId: true, amount: true }\r\n            });\r\n\r\n            // Safety check: Prevent double-release and release in wrong state\r\n            if (escrow.buyerId !== buyerId) {\r\n                throw new Error('Only the Buyer can release the escrow.');\r\n            }\r\n            if (escrow.status !== EscrowStatus.HOLD) {\r\n                throw new Error(`Escrow is not in HOLD status. Current status: ${escrow.status}.`);\r\n            }\r\n            \r\n            const amountDecimal = escrow.amount;\r\n\r\n            // 2. Update Escrow status to RELEASED and capture the updated record\r\n            const updatedEscrow = await tx.escrow.update({\r\n                where: { id: escrowId },\r\n                data: { status: EscrowStatus.RELEASED }\r\n            });\r\n\r\n            // 3. Credit Seller's platform balance\r\n            const seller = await tx.user.update({\r\n                where: { id: escrow.sellerId },\r\n                data: { balance: { increment: amountDecimal } },\r\n                select: { balance: true }\r\n            });\r\n\r\n            // 4. Create internal transaction and audit log\r\n            await tx.transaction.create({\r\n                data: {\r\n                    userId: escrow.sellerId,\r\n                    type: TransactionType.ESCROW_RELEASE,\r\n                    status: TransactionStatus.COMPLETED,\r\n                    amount: amountDecimal,\r\n                    details: { escrowId: updatedEscrow.id },\r\n                    escrowId: updatedEscrow.id,\r\n                }\r\n            });\r\n            await logAudit(tx, buyerId, 'ESCROW_RELEASED', updatedEscrow.id, { sellerNewBalance: seller.balance });\r\n\r\n            return updatedEscrow;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Buyer or Seller raises a dispute. Locks the funds.\r\n     */\r\n    static async raiseDispute(escrowId: string, userId: string, reason: string) {\r\n        return prisma.$transaction(async (tx) => {\r\n            const escrow = await tx.escrow.findUniqueOrThrow({\r\n                where: { id: escrowId },\r\n            });\r\n\r\n            if (escrow.buyerId !== userId && escrow.sellerId !== userId) {\r\n                throw new Error('Only the Buyer or Seller can raise a dispute.');\r\n            }\r\n\r\n            if (escrow.status !== EscrowStatus.HOLD) {\r\n                throw new Error('Dispute can only be raised on an active (HOLD) escrow.');\r\n            }\r\n\r\n            // 1. Update Escrow status to DISPUTED\r\n            const updatedEscrow = await tx.escrow.update({\r\n                where: { id: escrowId },\r\n                data: { \r\n                    status: EscrowStatus.DISPUTED,\r\n                    disputeRaised: true,\r\n                    disputeReason: reason,\r\n                }\r\n            });\r\n\r\n            // 2. Audit Log\r\n            await logAudit(tx, userId, 'DISPUTE_RAISED', escrowId, { reason });\r\n            return updatedEscrow;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Admin resolves a dispute (Release to Seller or Refund to Buyer).\r\n     * ACID: Uses transaction to ensure fund movement and status change are atomic.\r\n     */\r\n    static async resolveDispute(adminId: string, escrowId: string, resolution: 'APPROVE' | 'REJECT') {\r\n        \r\n        // NOTE: In a real system, we'd check if adminId has the ADMIN role.\r\n        \r\n        return prisma.$transaction(async (tx) => {\r\n            const escrow = await tx.escrow.findUniqueOrThrow({\r\n                where: { id: escrowId },\r\n                select: { id: true, status: true, buyerId: true, sellerId: true, amount: true }\r\n            });\r\n\r\n            if (escrow.status !== EscrowStatus.DISPUTED) {\r\n                throw new Error(`Escrow is not in DISPUTED status. Current status: ${escrow.status}.`);\r\n            }\r\n\r\n            const amountDecimal = escrow.amount;\r\n            let targetUserId: string;\r\n            let newStatus: EscrowStatus;\r\n            let transactionType: TransactionType;\r\n\r\n            if (resolution === 'APPROVE') {\r\n                // Funds go to Seller\r\n                targetUserId = escrow.sellerId;\r\n                newStatus = EscrowStatus.RELEASED;\r\n                transactionType = TransactionType.ESCROW_RELEASE;\r\n            } else { // REJECT (Funds go back to Buyer)\r\n                // Funds go back to Buyer\r\n                targetUserId = escrow.buyerId;\r\n                newStatus = EscrowStatus.REFUNDED;\r\n                transactionType = TransactionType.ESCROW_LOCK; // Use LOCK type with positive amount for refund credit\r\n            }\r\n\r\n            // 1. Update Escrow status\r\n            const updatedEscrow = await tx.escrow.update({\r\n                where: { id: escrowId },\r\n                data: { \r\n                    status: newStatus,\r\n                    disputeResolvedAt: new Date(),\r\n                }\r\n            });\r\n\r\n            // 2. Credit the target user's platform balance\r\n            const targetUser = await tx.user.update({\r\n                where: { id: targetUserId },\r\n                data: { balance: { increment: amountDecimal } },\r\n                select: { balance: true }\r\n            });\r\n\r\n            // 3. Create internal transaction and audit log\r\n            await tx.transaction.create({\r\n                data: {\r\n                    userId: targetUserId,\r\n                    type: transactionType,\r\n                    status: TransactionStatus.COMPLETED,\r\n                    amount: amountDecimal,\r\n                    details: { escrowId: escrow.id, resolution, targetUserId },\r\n                    escrowId: escrow.id,\r\n                }\r\n            });\r\n            await logAudit(tx, adminId, `DISPUTE_RESOLVED_${resolution}`, escrowId, { targetUserId, newBalance: targetUser.balance });\r\n            \r\n            return updatedEscrow;\r\n        });\r\n    }\r\n}\r\n\r\n// Minimal Audit Service stub\r\nexport const logAudit = async (tx: any, userId: string, action: string, entityId: string | null = null, details: any = {}) => {\r\n    await tx.auditLog.create({\r\n        data: {\r\n            userId,\r\n            action,\r\n            entityId,\r\n            newState: details,\r\n        }\r\n    });\r\n};"],"version":3}